# Set default $hdr_strict_transport_security if Strict-Transport-Security does not exist
map $upstream_http_access_control_allow_origin $hdr_access_control_allow_origin {
   '' "*";
}

# admin server and health api
server {
   listen 8443 ssl;
   server_name  $hostname;
   
   ssl_certificate     /etc/nginx/pki/vcache-mgr-cert.crt;
   ssl_certificate_key /etc/nginx/pki/vcache-mgr-cert.key;

   add_header Access-Control-Allow-Origin $hdr_access_control_allow_origin;

   rewrite ^/admin/$ /admin permanent;
   location /admin {
      resolver 127.0.0.11 ipv6=off;
	  proxy_redirect off;
      proxy_http_version 1.1;
      proxy_set_header Host "http://vcache_mgr:1880";
	  proxy_set_header Upgrade $http_upgrade;  
      proxy_set_header Connection 'upgrade';  
      proxy_cache_bypass $http_upgrade;  
	   
      # XXX this needs to be a real login page with auth cookie XXX
      # auth_basic "Restricted Content";
	  # auth_basic_user_file /etc/nginx/.htpasswd;
   	  proxy_pass http://vcache_mgr:1880/ui;
   }

   # this should not be needed but node-red does not respect Host header setting
   location /ui {
      resolver 127.0.0.11 ipv6=off;
      proxy_redirect off;
      proxy_http_version 1.1;
      proxy_set_header Host "http://vcache_mgr:1880";
	  proxy_set_header Upgrade $http_upgrade;  
      proxy_set_header Connection 'upgrade';  
      proxy_cache_bypass $http_upgrade;  
 
   	  proxy_pass http://vcache_mgr:1880;
   }

   # detailed cache health check - XXX apikey?
   location ~ /health {
      perl vCacheMgr::Health::handler;
   }
   # simple health endpoint (returns client ip)
   location = / {
      add_header Content-Type application/json;
	  return 200 '{"ip": "$remote_addr"}';
   }
}





