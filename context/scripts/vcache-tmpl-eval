#!/usr/bin/env perl

use strict;
use FindBin;
use lib "$FindBin::Bin/../perllib";

use JSON;
use JSON::Relaxed;
use Getopt::Long qw(:config gnu_getopt pass_through);
use File::Basename;
use Data::Dumper;
use Text::Template;

my $VCACHE_ROOT = "$FindBin::Bin/..";

sub ukeys {
  my $h = shift;
  if (ref($h) eq 'ARRAY') {
	@{$h} = map {ukeys($_)} @{$h};
  } elsif (ref($h) eq 'HASH') {
	foreach my $k (keys %{$h}) {
	  my $u = $k;
	  my $v = ukeys($h->{$k});
	  if ($u =~ s/-/_/g) {
		delete $h->{$k};
	  }
	  $h->{$u} = $v;
	}
  }
  return $h;
}

sub varr {
  my $obj = shift;
  my $key = shift;
  if (ref($obj) eq 'HASH') {
	# cover nested objects too
	while(my ($k,$v) = each %{$obj}) {
	  if ($k eq $key) {
		$obj->{$k} = [$v] unless ref($v) eq 'ARRAY';
	  } else {
		varr($v, $key);
	  }
	}

  } elsif (ref($obj) eq 'ARRAY') {
	foreach my $o (@{$obj}) {
	  varr($o, $key);
	}
  }
  return $obj;
}

# translate perl regex back refs to related vcl regex back refs
sub vcl_br {
  my $prefix = shift;
  my $regex = shift;
  my @regex;

  @regex = split(/(\$\d+)/, $regex);
  s/(.*)/"$1"/ foreach (@regex);
  s/"\$(\d+)"/$prefix.backref($1)/ foreach (@regex);
  my @arr = grep { $_ !~ /""/ } @regex;
  my $ret = join(" + ", @arr);
  return $ret;
}

# execute sub ref against key within hash tree
sub vsub {
  my $obj = shift;
  my $key = shift;
  my $sub = shift;

  if (ref($obj) eq 'HASH') {
	# cover nested objects too
	while(my ($k,$v) = each %{$obj}) {
	  if (not defined($key)) {
		if (ref $v) {
		  vsub($v, undef, $sub);
		} else {
		   &$sub($obj->{$k})
		}
	  } elsif ($k eq $key) {
		&$sub($obj->{$k});
	  } else {
		vsub($v, $key, $sub);
	  }
	}

  } elsif (ref($obj) eq 'ARRAY') {
	foreach my $o (@{$obj}) {
	  vsub($o, $key, $sub);
	}
  }
  return $obj;
}

sub import_env_file {
  my $env = shift;

  open(ENV, "$env") or die "unable to open env file ($env): $?";
  while (<ENV>) {
    my ($key, $val) = split(/=/);
	chomp($val);
    # remove any quotes around the value
    $val =~ s/^(?:"|')(.*)(?:"|')$/$1/;
	# handle escaped values
    $val =~ s/\\(.)/$1/g;
	$ENV{$key} = $val;
  }
  close(ENV);
}

my $opts = {};
my $cfg_file;

GetOptions($opts,'debug|d+', 'cfg-file|f=s', 'template|t=s', 'out-file|o=s', 'env-file|e=s');

my $env_file = $opts->{'env-file'};
$env_file =  "$VCACHE_ROOT/.env" if not defined($env_file) and -r "$VCACHE_ROOT/.env";

my $cfg_file = $opts->{'cfg-file'} || "$VCACHE_ROOT/conf/vcache.cfg";

open(F, $cfg_file) || die("unable to open conf file");

my $rjson;
{
  local $/ = undef;
  $rjson = <F>;
}
my $p = new JSON::Relaxed::Parser;
my $cfg = $p->parse("{$rjson}");
die "unable to parse cfg ($cfg_file): $?" unless defined $cfg;

$cfg = ukeys($cfg);

# normalize config to array for entries that can be repeated
varr($cfg, 'cache_rule');
varr($cfg, 'cache_key_rule');
varr($cfg, 'proxy');
# default proxy mode to reverse
foreach my $p (@{$cfg->{'proxy'}}) { $p->{'mode'} = 'reverse' unless defined $p->{'mode'} }
# default any bare ttl values to seconds (time suffixes: s,m,h,d,y)
vsub($cfg, 'ttl', sub {$_[0] =~ s/^\d+$/$&s/});
# import any environment interpolate any env vars
import_env_file($env_file) if defined($env_file);
vsub($cfg, undef, sub { $_[0] = $ENV{$1} if $_[0] =~ /"?\$\{([^\}]+)\}"?/ and exists $ENV{$1}; });

#print Dumper $cfg;

#print Dumper \%ENV;

my $subs = { vcl_br => \&vcl_br };

my $tmpl = new Text::Template(TYPE=>"FILE",SOURCE=>$opts->{'template'},DELIMITERS=>['{{','}}']);
die "error constructing cfg template ($opts->{template}): $Text::Template::ERROR" unless defined $tmpl;

$cfg->{vcl_br}=\&vcl_br;
my $output = $tmpl->fill_in(HASH=>$cfg);
die "error populating cfg template: $Text::Template::ERROR" unless defined $output;

my $out_file = $opts->{'out-file'};
open(OUT, ">$out_file") or die "could not open output file for writing";
print OUT "$output\n";

