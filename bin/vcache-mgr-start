#!/usr/bin/env bash

die() { echo "$*" >&2; exit 6; }  # complain to STDERR and exit with error
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }

while getopts d-: OPT; do
  # support long options: https://stackoverflow.com/a/28466267/519360
  if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
    OPT="${OPTARG%%=*}"       # extract long option name
    OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
    OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
  fi
  case "$OPT" in
    d | debug )    debug=true ;;
#    b | bravo )    needs_arg; bravo="$OPTARG" ;;
#    c | charlie )  needs_arg; charlie="$OPTARG" ;;
    ??* )          die "Illegal option --$OPT" ;;  # bad long option
    ? )            exit 5 ;;  # bad short option (error reported via getopts)
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list


SOURCE_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && cd .. && pwd )

cd $SOURCE_DIR

if [[ $? != 0 ]]; then
	echo "[$?] unable to cd to source directory..."
	exit 1
fi

DC_VERSION=$(sudo docker-compose version)
if [ $? != 0 ]; then
    echo "please install docker-compose and provide sudo access..."
    exit 2
else
	echo "running docker-compose (>= 1.29 required): ${DC_VERSION}"
fi

sudo docker-compose ps --services --filter "status=running" 2>/dev/null | grep "vcache" > /dev/null

if [ $? == 0 ]; then
	echo "vcache containers already running..."
	exit 3
fi

if [[ -f .env && -r .env ]]; then
	echo "using existing .env file..."
	echo "----- .env ----"
	cat .env
	echo "--------------"
else
	echo "generating .env file..."
	read -p "enter the vcache hostname[$HOSTNAME]: " hostname
	hostname=${hostname:-$HOSTNAME}
    echo "VCACHE_HOSTNAME=${hostname}" > .env
	echo "VCACHE_MEM_SIZE=12G" >> .env
fi

VCACHE_VERSION=`git describe 2> /dev/null`
if [[ $? != 0 ]]; then
	if [[ -r ./run/vcache-version.txt ]]; then
		VCACHE_VERSION=`cat ./run/vcache-version.txt`
	else
	    echo "[$?]no git revision or version.txt file detected, using: 0.0.0"
	    VCACHE_VERSION="0.0.0"
	fi
fi
echo -n ${VCACHE_VERSION} > ./run/vcache-version.txt


# read the config and eval templates for nginx and varnish
if [[ ! -e ./conf/vcache.cfg && -e ./conf/vcache.cfg.dist ]]; then
	cp ./conf/vcache.cfg.dist ./conf/vcache.cfg
fi
									  
./bin/vcache-cfg-update

if [[ $? != 0 ]]; then
	echo "error updating vache cfg files ($?)"
	exit 7
fi

echo "cleaning up previous deployment..."
sudo docker-compose down

rm -f run/*.sock run/*.pid
# XXX there must be a better way to grant write perms to containers
chmod ugo+rwx log run etc/varnishstats

echo "starting vcache (${VCACHE_VERSION}) ..."

if [[ $debug ]]; then
	sudo docker-compose up
else
	sudo docker-compose up -d
fi

if [[ $? != 0 ]]; then
	echo "[$?] an error occured starting vcache, exiting..."
	exit 4
else
	echo "vcache started!"
fi

exit 0
