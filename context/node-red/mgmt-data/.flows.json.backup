[
    {
        "id": "953eb73365d84859",
        "type": "tab",
        "label": "vCache Manager",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "08ebeea6e2046abd",
        "type": "tab",
        "label": "Configuration",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9a56025e8414a3d5",
        "type": "tab",
        "label": "Table demo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4f6b87ae.7d3bb",
        "type": "subflow",
        "name": "List Files",
        "info": "# List files\n\nWill list files in a directory.\n\nPath can be set in `msg.payload` or by setting the `DIRECTORY` environment variable.\n\nExtensions can be filtered by settings the `EXTENSIONS` environment variable to an Array of extensions.\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "cf0b484b.b70c9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": [
                    {
                        "id": "13486428.bcfc4c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DIRECTORY",
                "type": "str",
                "value": ""
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ]
    },
    {
        "id": "19ad2b6f.f11b85",
        "type": "subflow",
        "name": "FIle Upload",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 1140,
                "y": 280,
                "wires": [
                    {
                        "id": "144a9c8f.af7e9b",
                        "port": 0
                    },
                    {
                        "id": "854a9fb8.a668a8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "UPLOAD_DIR",
                "type": "str",
                "value": "."
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ],
        "outputLabels": [
            "fileWritten"
        ]
    },
    {
        "id": "052b56c89572e05e",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Lucida Sans Typewriter,Lucida Console,Monaco,monospace",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Lucida Sans Typewriter,Lucida Console,Monaco,monospace"
                }
            },
            "angularTheme": {
                "primary": "light-green",
                "accents": "light-green",
                "warn": "red",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "vCache Manager",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "01520deab0927305",
        "type": "ui_tab",
        "name": "vCache Manager",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "66d92f18708659f1",
        "type": "ui_group",
        "name": "vCache Nodes",
        "tab": "01520deab0927305",
        "order": 1,
        "disp": true,
        "width": 19,
        "collapse": true,
        "className": ""
    },
    {
        "id": "2bfbf363d31643c1",
        "type": "ui_group",
        "name": "Pending Nodes",
        "tab": "94c965dfa02ebec9",
        "order": 1,
        "disp": true,
        "width": "19",
        "collapse": true,
        "className": ""
    },
    {
        "id": "2871cce383627674",
        "type": "ui_group",
        "name": "Certificate Upload",
        "tab": "01520deab0927305",
        "order": 2,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "92ca2c694d9d5c55",
        "type": "redis-config",
        "name": "vcache_mgr_redis:6379",
        "options": "{\"host\":\"vcache_mgr_redis\",\"db\":0}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "94c965dfa02ebec9",
        "type": "ui_tab",
        "name": "Configuration",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "df0d18fc21c1e03c",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "66d92f18708659f1",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "f9e4191bb0c85a8d",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "66d92f18708659f1",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "9b78a7e8634be13a",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "66d92f18708659f1",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "b92ea40f96e2eaf4",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "66d92f18708659f1",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "c03018c2a016ab7a",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 1,
        "width": 10,
        "height": 1
    },
    {
        "id": "ba2ea0a60eb7cf69",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 3,
        "width": 4,
        "height": 1
    },
    {
        "id": "24689e1ffc6951d3",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "83fa158c026c0be8",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 7,
        "width": 4,
        "height": 1
    },
    {
        "id": "f0d4c8602c045d57",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 8,
        "width": 10,
        "height": 1
    },
    {
        "id": "90cedd2a8446aa03",
        "type": "ui_group",
        "name": "Rejected Nodes",
        "tab": "94c965dfa02ebec9",
        "order": 2,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2da8a42232fce766",
        "type": "ui_spacer",
        "z": "08ebeea6e2046abd",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "40c8f8f860bce829",
        "type": "ui_spacer",
        "z": "08ebeea6e2046abd",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "74349c7fb9a9e917",
        "type": "ui_spacer",
        "z": "08ebeea6e2046abd",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "bb6d185b3fa228f4",
        "type": "ui_spacer",
        "z": "08ebeea6e2046abd",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "73f8a57304b2ea9c",
        "type": "ui_spacer",
        "z": "08ebeea6e2046abd",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 10,
        "width": 18,
        "height": 1
    },
    {
        "id": "e2d9d8c893f54955",
        "type": "ui_spacer",
        "z": "08ebeea6e2046abd",
        "name": "spacer",
        "group": "90cedd2a8446aa03",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "fcf6b2d069160ad1",
        "type": "ui_spacer",
        "z": "08ebeea6e2046abd",
        "name": "spacer",
        "group": "90cedd2a8446aa03",
        "order": 4,
        "width": 9,
        "height": 1
    },
    {
        "id": "87d1a1edfdbbfb91",
        "type": "ui_spacer",
        "z": "08ebeea6e2046abd",
        "name": "spacer",
        "group": "90cedd2a8446aa03",
        "order": 6,
        "width": 18,
        "height": 1
    },
    {
        "id": "3a8f4976ca221093",
        "type": "ui_spacer",
        "z": "9a56025e8414a3d5",
        "name": "spacer",
        "group": "241a7fce59ba6ffb",
        "order": 3,
        "width": 16,
        "height": 1
    },
    {
        "id": "e98db34282e0c536",
        "type": "ui_spacer",
        "z": "9a56025e8414a3d5",
        "name": "spacer",
        "group": "241a7fce59ba6ffb",
        "order": 6,
        "width": 16,
        "height": 1
    },
    {
        "id": "a523f545ff4acaad",
        "type": "ui_spacer",
        "z": "9a56025e8414a3d5",
        "name": "spacer",
        "group": "241a7fce59ba6ffb",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "42f8fed5bc823a7b",
        "type": "ui_spacer",
        "z": "9a56025e8414a3d5",
        "name": "spacer",
        "group": "241a7fce59ba6ffb",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "241a7fce59ba6ffb",
        "type": "ui_group",
        "name": "Table demo",
        "tab": "e7f9786e501c07b5",
        "order": 3,
        "disp": false,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e7f9786e501c07b5",
        "type": "ui_tab",
        "name": "Tech Exchange (table)",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "208379c0.81563e",
        "type": "exec",
        "z": "4f6b87ae.7d3bb",
        "command": "ls",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 510,
        "y": 60,
        "wires": [
            [
                "13486428.bcfc4c"
            ],
            [],
            []
        ]
    },
    {
        "id": "13486428.bcfc4c",
        "type": "change",
        "z": "4f6b87ae.7d3bb",
        "name": "split and filter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t    $files := [$split(payload, '\\n')[$ != \"\"]];\t    $count($env('EXTENSIONS')) = 0 ? [$files] : [$files[$split($, '.')[-1] in $env('EXTENSIONS')]];\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "cf0b484b.b70c9",
        "type": "switch",
        "z": "4f6b87ae.7d3bb",
        "name": "",
        "property": "$env('DIRECTORY')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 80,
        "wires": [
            [
                "208379c0.81563e"
            ],
            [
                "56426a5a.fbc44c"
            ]
        ]
    },
    {
        "id": "56426a5a.fbc44c",
        "type": "change",
        "z": "4f6b87ae.7d3bb",
        "name": "DIRECTORY",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DIRECTORY",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "208379c0.81563e"
            ]
        ]
    },
    {
        "id": "954c0325.f4f63",
        "type": "http in",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "url": "/fileupload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "7433a631.a7f58",
                "faf9ee8.6642a1"
            ]
        ]
    },
    {
        "id": "964d2a30.34e938",
        "type": "http response",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "1617f361.5dac2d",
        "type": "ui_template",
        "z": "19ad2b6f.f11b85",
        "group": "2871cce383627674",
        "name": "Upload",
        "order": 4,
        "width": 9,
        "height": 2,
        "format": "<form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file1\" id=\"file1\"><br>\n    <input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\">\n    <progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"></progress>\n    <p id=\"status\"></p>\n    <p id=\"loaded_n_total\"></p>\n</form>\n\n<script>\n    function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"/fileupload\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 120,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "ea605dad.7b36a8",
        "type": "subflow:4f6b87ae.7d3bb",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "env": [
            {
                "name": "DIRECTORY",
                "type": "env",
                "value": "UPLOAD_DIR"
            },
            {
                "name": "EXTENSIONS",
                "type": "env",
                "value": "EXTENSIONS"
            }
        ],
        "x": 380,
        "y": 140,
        "wires": [
            [
                "b42b38bf.d5a548"
            ]
        ]
    },
    {
        "id": "bdb6a329.8574b",
        "type": "link in",
        "z": "19ad2b6f.f11b85",
        "name": "refreshFileDropdown",
        "links": [
            "15ae2641.f1cc7a",
            "be23c76f.4a3988"
        ],
        "x": 75,
        "y": 140,
        "wires": [
            [
                "f0813c91.8c7838"
            ]
        ]
    },
    {
        "id": "62157c1a.4444bc",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selectedFile",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "7433a631.a7f58",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "getFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & req.files[0].originalname",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.files[0].buffer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 360,
        "wires": [
            [
                "63e6ebc1.1cc124"
            ]
        ]
    },
    {
        "id": "10c1284a.0e3f98",
        "type": "file",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "144a9c8f.af7e9b"
            ]
        ]
    },
    {
        "id": "af0d1f9b.6eb468",
        "type": "inject",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "f0813c91.8c7838"
            ]
        ]
    },
    {
        "id": "a0bbc93d.d6f6b8",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "getSelectedFile",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "$env('UPLOAD_DIR')  & '/' & $flowContext('selectedFile')",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Delete File ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 220,
        "wires": [
            [
                "3e909d09.b8b5f2"
            ]
        ]
    },
    {
        "id": "854a9fb8.a668a8",
        "type": "file",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "x": 830,
        "y": 220,
        "wires": [
            [
                "be23c76f.4a3988"
            ]
        ]
    },
    {
        "id": "3e909d09.b8b5f2",
        "type": "ui_toast",
        "z": "19ad2b6f.f11b85",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "topic": "",
        "name": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "a33238b4.01cae"
            ]
        ]
    },
    {
        "id": "a33238b4.01cae",
        "type": "switch",
        "z": "19ad2b6f.f11b85",
        "name": "OK ?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "854a9fb8.a668a8"
            ]
        ]
    },
    {
        "id": "b54a9427.62f75",
        "type": "catch",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "1a19fda8.e72fd2"
            ]
        ]
    },
    {
        "id": "563135cc.7b97e4",
        "type": "ui_toast",
        "z": "19ad2b6f.f11b85",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": []
    },
    {
        "id": "1a19fda8.e72fd2",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "getError",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 500,
        "wires": [
            [
                "563135cc.7b97e4"
            ]
        ]
    },
    {
        "id": "be23c76f.4a3988",
        "type": "link out",
        "z": "19ad2b6f.f11b85",
        "name": "refreshAfterDelete",
        "links": [
            "bdb6a329.8574b"
        ],
        "x": 1135,
        "y": 220,
        "wires": []
    },
    {
        "id": "15ae2641.f1cc7a",
        "type": "link out",
        "z": "19ad2b6f.f11b85",
        "name": "refreshAfterUpload",
        "links": [
            "bdb6a329.8574b"
        ],
        "x": 1135,
        "y": 340,
        "wires": []
    },
    {
        "id": "faf9ee8.6642a1",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'File ' & req.files[0].originalname & ' uploaded.'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 440,
        "wires": [
            [
                "964d2a30.34e938"
            ]
        ]
    },
    {
        "id": "f0813c91.8c7838",
        "type": "delay",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 190,
        "y": 140,
        "wires": [
            [
                "ea605dad.7b36a8"
            ]
        ]
    },
    {
        "id": "a5f544d.69b9bb8",
        "type": "watch",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "files": "$(UPLOAD_DIR)",
        "recursive": "",
        "x": 340,
        "y": 40,
        "wires": [
            [
                "f0813c91.8c7838"
            ]
        ]
    },
    {
        "id": "b42b38bf.d5a548",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "options",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "63e6ebc1.1cc124",
        "type": "switch",
        "z": "19ad2b6f.f11b85",
        "name": "extensionAllowed ?",
        "property": "$env('EXTENSIONS')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "$split(filename, '.')[-1]",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "10c1284a.0e3f98"
            ],
            [
                "e34d7e40.c64b5"
            ]
        ]
    },
    {
        "id": "e34d7e40.c64b5",
        "type": "function",
        "z": "19ad2b6f.f11b85",
        "name": "Error",
        "func": "node.error(`Error: only ${env.get('EXTENSIONS')} files are allowed.`, msg)\n",
        "outputs": 0,
        "noerr": 0,
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "144a9c8f.af7e9b",
        "type": "change",
        "z": "19ad2b6f.f11b85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "15ae2641.f1cc7a"
            ]
        ]
    },
    {
        "id": "530b57a13f57ac7e",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "start",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 220,
        "wires": [
            [
                "9c1cae2c8cd579f1",
                "8b6caa4128b0ab62"
            ]
        ]
    },
    {
        "id": "466978b03cbfdd40",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "poll (7)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 440,
        "wires": [
            [
                "e573f44cd6952735"
            ]
        ]
    },
    {
        "id": "368b5ea2907b5488",
        "type": "ui_ui_control",
        "z": "953eb73365d84859",
        "name": "Refresh",
        "events": "all",
        "x": 280,
        "y": 500,
        "wires": [
            [
                "27eedc6ffafb236a"
            ]
        ]
    },
    {
        "id": "cc06064e8a1e4629",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "change",
        "payloadType": "str",
        "x": 100,
        "y": 560,
        "wires": [
            [
                "27eedc6ffafb236a"
            ]
        ]
    },
    {
        "id": "27eedc6ffafb236a",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "refresh table",
        "func": "if ([\"connect\", \"change\"].includes(msg.payload)) {\n  const fields = [\"node\", \"status\", \"cpu_use_pct\", \"mem_use_pct\", \"client_bw\", \"upstream_bw\", \"users\",\"cache_eff\", ]\n  const dataSorted =\n    \"function (sorters, rows) { const ret = sorters.map((item) => { return { column: item.field, dir: item.dir }});const ids = rows.map((item)=>item.getData().id);this.send({payload:{sorters:ret,ids}});}\";\n  const rowContext = \"function (e, row) { e.preventDefault(); console.log(\\\"Right clickt! \\\", row.getData());console.log(\\\"e event:\\\", e); this.send({payload: {row: row.getData(), clientX: e.clientX, clientY: e.clientY}});}\";\n  const effLegend = \"function (value) { return (value >= 0) ? '&nbsp;&nbsp;' + value + ' %' : '-'; }\";\n  const statusColor = \"function (value) { if (value==0) return 'lightgray'; if (value==1) return 'springgreen'; if (value==2) return 'gold'; if (value==3) return 'red'; return 'black';}\";\n  const useColor = \"function (value) { if (value > 90) return 'red'; if (value > 80) return 'gold'; return 'limegreen';}\";\n  msg = {}; \n  msg.refresh = true\n  msg.payload = []\n  msg.ui_control = {\n    tabulator: {\n      rowContext: rowContext,\n      initialSort: (global.get(\"nodeSort\", \"file\") || {}).sorters || [],\n      dataSorted,\n      columns: [\n        {\n          field: \"id\",\n          title: \"&nbsp;ID\",\n          align: \"center\",\n          sorter: \"number\",\n          width: 45,\n        },{\n          field: \"node\",\n          title: \"Node\",\n          align: \"left\",\n          sorter: \"string\",\n          width: 240,\n        },\n        {\n          field: \"status\",\n          title: \"Status\",\n          align: \"center\",\n          formatter: \"traffic\",\n          formatterParams: {\n            color: statusColor,\n          },\n          sorter: \"string\",\n          width: 85,\n        },\n        {\n          field: \"cpu_use_pct\",\n          title: \"&nbsp;&nbsp;CPU\",\n          align: \"left\",\n          formatter: \"progress\",\n          formatterParams: {\n            legend: effLegend,\n            legendColor: \"#ffffff\",\n            legendAlign: \"center\",\n            color: useColor\n          },\n          sorter: \"number\",\n          width: 85,\n        }, {\n          field: \"mem_use_pct\",\n          title: \"&nbsp;&nbsp;RAM\",\n          align: \"left\",\n          formatter: \"progress\",\n          formatterParams: {\n            legend: effLegend,\n            legendColor: \"#ffffff\",\n            legendAlign: \"center\",\n            color: useColor\n          },\n          sorter: \"number\",\n          width: 85,\n        },\n        {\n          field: \"client_bw\",\n          title: \"&nbsp;BW &#129095;\",\n          align: \"center\",\n          sorter: \"number\",\n          width: 85,\n        }, \n        {\n          field: \"upstream_bw\",\n          title: \"&nbsp;BW &#129093;\",\n          align: \"center\",\n          sorter: \"number\",\n          width: 85,\n        },\n        {\n          field: \"users\",\n          title: \"&nbsp;Users\",\n          align: \"center\",\n          sorter: \"number\",\n          width: 85,\n        },\n        {\n          field: \"cache_eff\",\n          title: \"&nbsp;&nbsp;Cache Eff\",\n          align: \"left\",\n          formatter: \"progress\",\n          formatterParams: {\n            legend: effLegend,\n            legendColor: \"#ffffff\",\n            legendAlign: \"center\",\n          },\n          sorter: \"number\",\n        },\n      ],\n    },\n  }\n  return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 560,
        "wires": [
            [
                "567783dfb28f09df",
                "c347b6521867b6fb"
            ]
        ]
    },
    {
        "id": "c347b6521867b6fb",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "node table manager",
        "func": "///////////////\n// Functions //\n///////////////\n\nfunction byKey(obj) {\n  return function (item) {\n    return item.node === obj.node;\n  }\n}\n\nfunction byVal(val) {\n  return function (item) {\n    return item == val;\n  }\n}\n\n// Row object going to table\nfunction makeObj(obj) {\n  const colors = [\"#C8E6C8\", \"#64A064\", \"#1E461E\"]\n  const idx = obj.cache_eff < 25 ? 0 : obj.cache_eff < 50 ? 1 : 2\n  obj.displayEff = `<font color=\"${colors[idx]}\">${obj.cache_eff}</font>`\n  return obj\n}\n\n// Parameterized array sort function\nfunction sorterFactory(obj) {\n  let { column, dir } = obj[0]\n  column = column === \"displayEff\" ? \"cache_eff\" : column\n  return function sorter(itemA, itemB) {\n    const a = itemA[column]\n    const b = itemB[column]\n    const factor = dir === \"asc\" ? +1 : -1\n    return a < b ? -1 * factor : a > b ? +1 * factor : 0\n  }\n}\n\n// find the next available index of make a new one\nfunction findNextId(store) {\n  const list = [...store].sort((a, b) => a.id - b.id);\n\n  let nextId = 0;\n\n  for (const item of list) {\n    const id = item.id;\n    if (id == nextId) {\n      nextId++;\n    } else if (id > nextId) {\n      break;\n    }\n  }\n  return nextId;\n}\n\n// find the next available index of make a new one\nfunction findNextIdx(store) {\n  const list = [...store].sort((a, b) => a - b);\n\n  let nextVal = 0;\n\n  for (const val of list) {\n    if (val == nextVal) {\n      nextVal++;\n    } else if (val > nextVal) {\n      break;\n    }\n  }\n  return nextVal;\n}\n\n// Sort data store based on selected table sort\nfunction sortStore(sort, data) {\n  if (!sort || !sort.sorters.length) {\n    node.error(\"sortStore: sort store error\");\n    return\n  }\n  data.sort(sorterFactory(sort.sorters))\n  var i;\n  for (i = 0; i < data.length; i++) {\n    if (i < sort.ids.length) {\n      data[i].id = sort.ids[i];\n    } else {\n      data[i].id = sort.ids[i] = findNextIdx(sort.ids);\n      node.warn(\"sortStore: new index not in nodeSort: \" + data[i].id)\n    }\n  }\n  if (sort.ids.length > i) {\n    let n = sort.ids.length - i;\n    node.warn(\"sortStore: trimming nodeSort: \" + n + \" (\" + i + \" to \" + (sort.ids.length-1) + \")\")\n    sort.ids.splice(-n, n);\n  }\n}\n\n////////////////\n// Processing //\n////////////////\nlet data_store = global.get(\"nodeData\", \"file\") || [];\nlet sort_store = global.get(\"nodeSort\", \"file\") || [];\nif (msg.refresh) {\n  return { payload: data_store };\n}\nif (Array.isArray(msg.payload)) { // process table data update or add\n  for (let in_row of msg.payload) {\n    in_row = makeObj(in_row) // This is the row that is sent to table\n    let row_data = data_store.find(byKey(in_row));\n    if (!row_data) {\n      in_row.id = findNextId(data_store);\n      node.warn(\"table mgr: node not in data store: \" + in_row.node + \" new id: \" + in_row.id);\n      data_store.push(in_row) // Append to store\n    } else {\n      Object.assign(row_data, in_row) // Update store (row_data is an item of mutable array)\n    }\n  }\n  sortStore(sort_store, data_store);\n  msg.payload = {\n    command: \"updateOrAddData\",\n    arguments: [data_store],\n  };\n} else { // process single message - refresh or delete\n  // When dashboard is reloaded or when flows start, display last table state\n  let row = msg.payload;\n  let idx = data_store.findIndex(byKey(row));\n  if (idx >=0) {\n    data_store.splice(idx, 1);\n    let sidx = sort_store.ids.findIndex(byVal(row.id));\n    if (sidx>0) {\n      sort_store.ids.splice(sidx, 1);\n    } else {\n      node.warn(\"delete: id not found in sort store: \"  + row.id); \n    }\n  } else {\n    node.warn(\"delete: node not found in data store: \" + row.node);\n  }\n  msg.payload = {\n    command: \"deleteRow\",\n    arguments: [row.id],\n  }\n}\n\nglobal.set(\"nodeData\", data_store, \"file\");\nglobal.set(\"nodeSort\", sort_store, \"file\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "clone",
                "module": "clone"
            }
        ],
        "x": 540,
        "y": 500,
        "wires": [
            [
                "567783dfb28f09df",
                "a8c3985ad1292b73"
            ]
        ]
    },
    {
        "id": "567783dfb28f09df",
        "type": "ui_table",
        "z": "953eb73365d84859",
        "group": "66d92f18708659f1",
        "name": "Nodes",
        "order": 1,
        "width": 17,
        "height": 4,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 530,
        "y": 560,
        "wires": [
            [
                "05143c60bda4315f"
            ]
        ]
    },
    {
        "id": "ce2ff155071f51ec",
        "type": "switch",
        "z": "953eb73365d84859",
        "name": "Non-empty sorter?",
        "property": "payload.ids.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 560,
        "wires": [
            [],
            [
                "11e6118b3d66d8ed"
            ]
        ],
        "outputLabels": [
            "Yes",
            ""
        ]
    },
    {
        "id": "17f908c5c029e02d",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "re-init table",
        "func": "global.set(\"nodeData\", [], \"nodes\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "3a60dfa8e2ea231a",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 90,
        "y": 320,
        "wires": [
            [
                "17f908c5c029e02d"
            ]
        ]
    },
    {
        "id": "e573f44cd6952735",
        "type": "redis-command",
        "z": "953eb73365d84859",
        "server": "92ca2c694d9d5c55",
        "command": "KEYS",
        "name": "vcache nodes",
        "topic": "vcache_node:*:*",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 300,
        "y": 440,
        "wires": [
            [
                "3a9bce3d609e11ce"
            ]
        ]
    },
    {
        "id": "f886bb801a5b9919",
        "type": "redis-instance",
        "z": "953eb73365d84859",
        "server": "92ca2c694d9d5c55",
        "name": "vcache_mgr_redis",
        "topic": "redis",
        "location": "global",
        "x": 110,
        "y": 100,
        "wires": []
    },
    {
        "id": "3a9bce3d609e11ce",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "nodes from table",
        "func": "const redis = global.get('redis'); // Assumes Redis client is globally available\nconst now = Date.now();\nvar table = [];\n/**\n* 3 - CRIT, 2 - WARN, 1 - OK, 0 - UNKNOWN\n* @param {string | number | Date} stamp\n* @param {number} now\n* @param {number} cpu\n* @param {number} mem\n* @param {number} disk\n*/\nfunction calc_status(now, stamp, cpu, mem, disk) {\n    const stamp_ms = new Date(stamp).getTime();\n    const diff = (now - stamp_ms) / 1000;\n    if (diff > 30) return 0;\n    if (cpu > 90 || mem > 90 || disk > 90) return 3;\n    if (cpu > 80 || mem > 80 || disk > 80) return 2;\n    return 1;\n}\n\n// Function to retrieve hash objects for each key\nfunction get_nodes(keys, callback) {\n    let count = 0;\n    keys.forEach(function (key) {\n        redis.hgetall(key, function (err, hash) {\n            if (err) {\n                callback(err);\n                return;\n            }\n            \n            hash.node = hash.id;\n            delete hash.id;\n\n            hash.status = calc_status(now, hash._stamp, hash.cpu_use_pct, hash.mem_use_pct, hash.disk_use_pct);\n            if (hash.status == 0) {\n                hash.cache_eff = -1;\n                hash.cpu_use_pct = -1;\n                hash.mem_use_pct = -1;\n                hash.client_bw = NaN;\n                hash.upstream_bw = NaN;\n                hash.users = NaN;\n            } else {\n                hash.cache_eff = parseInt(hash.cache_eff_pct);\n                hash.mem_use_pct = parseFloat(hash.mem_use_pct);\n                hash.cpu_use_pct = parseFloat(hash.cpu_use_pct);\n                hash.client_bw = parseInt(hash.client_bw);\n                hash.upstream_bw = parseInt(hash.upstream_bw);\n                hash.users = parseInt(hash.client_sess);\n            }\n            table.push(hash);\n            count++;\n            if (count >= keys.length) {\n                callback(null,table);\n            }\n        });\n    });\n}\n\nfunction sort_arr(in_arr) {\n    const arr = [...in_arr].sort((a, b) => {\n        const A = a.node.toLowerCase();\n        const B = b.node.toLowerCase();\n        if (A < B) return -1;\n        if (A > B) return 1;\n        return 0;\n    });\n    return arr;\n}\n\n// Main function\nget_nodes(msg.payload, function (err, nodes) {\n    if (err) {\n        node.error(err);\n        return;\n    }\n//  table = nodes.map((/** @type {{ id: string; cache_eff_pct: string; client_sess: string; client_bw: string; upstream_bw: string; }} */ n) => ({\n//       \"node\": n.id.toLowerCase(),\n//       \"status\": \"up\".toUpperCase(),\n//        \"cache_eff\": parseInt(n.cache_eff_pct) == 0 ? 1 : parseInt(n.cache_eff_pct),\n//        \"client_bw\": parseInt(n.client_bw),\n//        \"upstream_bw\": parseInt(n.upstream_bw),\n//        \"users\": parseInt(n.client_sess),\n//    }));\n    msg.payload = nodes;\n    node.send(msg);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 440,
        "wires": [
            [
                "c347b6521867b6fb"
            ]
        ]
    },
    {
        "id": "da2988f368c4b510",
        "type": "ui_context_menu",
        "z": "953eb73365d84859",
        "group": "66d92f18708659f1",
        "order": 6,
        "width": 0,
        "height": 0,
        "fontSize": 16,
        "inputPositionXField": "payload.clientX",
        "inputPositionXType": "msg",
        "inputPositionYField": "payload.clientY",
        "inputPositionYType": "msg",
        "outputField": "payload",
        "inputMenuField": "menu",
        "inputMenuType": "fixed",
        "menuItems": [
            {
                "id": "",
                "icon": "",
                "label": "Details",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "",
                "icon": "",
                "label": "Delete",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            }
        ],
        "colors": "theme",
        "textColor": "#000000",
        "backgroundColor": "#ffffff",
        "borderColor": "#626262",
        "intervalLength": 0,
        "intervalUnit": "secs",
        "startTimerAtOpen": false,
        "startTimerAtLeave": true,
        "stopTimerAtEnter": true,
        "name": "RowCtxMenu",
        "x": 540,
        "y": 640,
        "wires": [
            [
                "ac59be7fa2383fc7"
            ]
        ]
    },
    {
        "id": "05143c60bda4315f",
        "type": "switch",
        "z": "953eb73365d84859",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "sorters",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "clientX",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 560,
        "wires": [
            [
                "ce2ff155071f51ec",
                "8319d2c0d1da848a"
            ],
            [
                "da2988f368c4b510"
            ]
        ]
    },
    {
        "id": "f773b77e37a40bb6",
        "type": "uuid",
        "z": "953eb73365d84859",
        "uuidVersion": "v4",
        "namespaceType": "custom",
        "namespace": "VIVOH_CACHE",
        "namespaceCustom": "VIVOH",
        "name": "UUID (gen)",
        "field": "payload",
        "fieldType": "msg",
        "x": 510,
        "y": 240,
        "wires": [
            [
                "51ab9183e6c445ee",
                "03470a367efdaf2e"
            ]
        ]
    },
    {
        "id": "51ab9183e6c445ee",
        "type": "file",
        "z": "953eb73365d84859",
        "name": "",
        "filename": "/var/run/vcache-mgr.uuid",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 750,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "9c1cae2c8cd579f1",
        "type": "fs-ops-access",
        "z": "953eb73365d84859",
        "name": "vcache.mgr uuid",
        "path": "/var/run",
        "pathType": "str",
        "filename": "vcache-mgr.uuid",
        "filenameType": "str",
        "read": true,
        "write": true,
        "throwerror": false,
        "x": 300,
        "y": 220,
        "wires": [
            [
                "ac931b189bcafeb4"
            ],
            [
                "f773b77e37a40bb6"
            ]
        ]
    },
    {
        "id": "8b6caa4128b0ab62",
        "type": "fs-ops-access",
        "z": "953eb73365d84859",
        "name": "vcache.mgr version",
        "path": "/var/run/",
        "pathType": "str",
        "filename": "vcache-mgr.version",
        "filenameType": "str",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 310,
        "y": 260,
        "wires": [
            [
                "28e546a9e90ffb1f"
            ],
            []
        ]
    },
    {
        "id": "05bef2ebd6355241",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "set global version",
        "func": "global.set(\"version\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "28e546a9e90ffb1f",
        "type": "file in",
        "z": "953eb73365d84859",
        "name": "vcache mgr version",
        "filename": "/var/run/vcache.version",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 530,
        "y": 280,
        "wires": [
            [
                "05bef2ebd6355241"
            ]
        ]
    },
    {
        "id": "03470a367efdaf2e",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "UUID (object)",
        "func": "msg.payload = { \"uuid\": msg.payload.replace(/\\n+$/, '')};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 200,
        "wires": [
            [
                "c5ba86245edf6da7"
            ]
        ]
    },
    {
        "id": "ac931b189bcafeb4",
        "type": "file in",
        "z": "953eb73365d84859",
        "name": "vcache mgr uuid",
        "filename": "/var/run/vcache-mgr.uuid",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 520,
        "y": 200,
        "wires": [
            [
                "03470a367efdaf2e"
            ]
        ]
    },
    {
        "id": "c5ba86245edf6da7",
        "type": "redis out",
        "z": "953eb73365d84859",
        "hostname": "vcache_mgr_redis",
        "port": 6379,
        "name": "UUID (out)",
        "key": "vcache_mgr",
        "structtype": "hash",
        "x": 930,
        "y": 200,
        "wires": []
    },
    {
        "id": "ac59be7fa2383fc7",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "handle context menu",
        "func": "if (msg.payload.toLowerCase() === 'delete') {\n    const node_id = msg.sourceMsg.payload.row.node;\n    msg.payload = \"salt-key -y -d \" + node_id;\n} else if (msg.payload.toLowerCase() === 'accept') {\n    const node_id = msg.sourceMsg.payload.row.node;\n    msg.payload = \"salt-key -y -a \" + node_id;\n} else {\n    msg.topic = null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 700,
        "wires": [
            [
                "7ede68d2930d2f9d"
            ]
        ]
    },
    {
        "id": "dedbd31c5db0034f",
        "type": "exec",
        "z": "953eb73365d84859",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 910,
        "y": 680,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "7ede68d2930d2f9d",
        "type": "switch",
        "z": "953eb73365d84859",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "eq",
                "v": "Delete",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 700,
        "wires": [
            [
                "dedbd31c5db0034f"
            ],
            [
                "b9e49c705dadd4fc"
            ]
        ]
    },
    {
        "id": "b9e49c705dadd4fc",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "delete node from table",
        "func": "const redis = global.get('redis'); // Assumes Redis client is globally available\n\nconst row = msg.sourceMsg.payload.row;\n\nconst key = \"vcache_node:\" + row.node + \":\" + row.uuid;\nredis.del(key, function (err, reply) {\n    if (err) {\n        node.error(\"Error deleting key(\" + reply + \"): \", err );\n    } else {\n        row.delete = true;\n        msg.payload = row\n        node.send(msg);\n    }\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 780,
        "wires": [
            [
                "c347b6521867b6fb"
            ]
        ]
    },
    {
        "id": "11e6118b3d66d8ed",
        "type": "change",
        "z": "953eb73365d84859",
        "name": "Save sort",
        "rules": [
            {
                "t": "set",
                "p": "nodeSort",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "a8c3985ad1292b73",
        "type": "debug",
        "z": "953eb73365d84859",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 440,
        "wires": []
    },
    {
        "id": "8319d2c0d1da848a",
        "type": "debug",
        "z": "953eb73365d84859",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 500,
        "wires": []
    },
    {
        "id": "3696af61.5b451",
        "type": "subflow:19ad2b6f.f11b85",
        "z": "08ebeea6e2046abd",
        "name": "certificate upload",
        "env": [
            {
                "name": "UPLOAD_DIR",
                "value": "/tmp",
                "type": "str"
            },
            {
                "name": "EXTENSIONS",
                "value": "[\"p12\",\"pkcs12\",\"pfx\",\"pem\"]",
                "type": "json"
            }
        ],
        "x": 240,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "b1d1fd628d350803",
        "type": "ui_text_input",
        "z": "08ebeea6e2046abd",
        "name": "cert pw",
        "label": "password",
        "tooltip": "pkcs12 password (blank if none)",
        "group": "2871cce383627674",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "password",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 440,
        "y": 660,
        "wires": [
            [
                "cbb5141d17c16d5c"
            ]
        ]
    },
    {
        "id": "6349b7a97ec7d3e7",
        "type": "ui_text_input",
        "z": "08ebeea6e2046abd",
        "name": "cert tag",
        "label": "certificate tag",
        "tooltip": "certificate tag name identifying the destination",
        "group": "2871cce383627674",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 440,
        "y": 620,
        "wires": [
            [
                "a1954ee40501addf"
            ]
        ]
    },
    {
        "id": "9ca920d805009264",
        "type": "ui_button",
        "z": "08ebeea6e2046abd",
        "name": "Accept All",
        "group": "2bfbf363d31643c1",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Accept All",
        "tooltip": "Accept all pending cache mgmt registrations",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 560,
        "wires": [
            [
                "1e980162154930d3"
            ]
        ]
    },
    {
        "id": "1e980162154930d3",
        "type": "exec",
        "z": "08ebeea6e2046abd",
        "command": "salt-key -y -A",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 560,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d6147e86664e5e9b",
        "type": "exec",
        "z": "08ebeea6e2046abd",
        "command": "sleep 10; salt '*' saltutil.sync_beacons",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "sync beacons",
        "x": 800,
        "y": 200,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "32ac04d1f6fe6e9e",
        "type": "ui_table",
        "z": "08ebeea6e2046abd",
        "group": "2bfbf363d31643c1",
        "name": "Pending Minions",
        "order": 1,
        "width": 6,
        "height": 1,
        "columns": [
            {
                "field": "node",
                "title": "Node",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 550,
        "y": 320,
        "wires": [
            [
                "acf4447a9db5dc4c"
            ]
        ]
    },
    {
        "id": "5a890de0ddaf48bb",
        "type": "inject",
        "z": "08ebeea6e2046abd",
        "name": "poll (7)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "7",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "694d6fe2baa337a6"
            ]
        ]
    },
    {
        "id": "694d6fe2baa337a6",
        "type": "exec",
        "z": "08ebeea6e2046abd",
        "command": "salt-key -L --output json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "30",
        "winHide": false,
        "oldrc": false,
        "name": "probe minions",
        "x": 300,
        "y": 300,
        "wires": [
            [
                "f1ecdf3d66c25ebd",
                "75933c13fdf23b68"
            ],
            [],
            []
        ]
    },
    {
        "id": "f1ecdf3d66c25ebd",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "pending minion data",
        "func": "if (msg.payload.length === 0) return null;\nvar json = JSON.parse(msg.payload);\nvar table = json[\"minions_pre\"].map((node) => (\n    {\n        \"node\": node,\n    }\n    ));\nconst rowContext = \"function (e, row) { e.preventDefault(); console.log(\\\"Right clickt! \\\", row.getData());console.log(\\\"e event:\\\", e); this.send({payload: {row: row.getData(), clientX: e.clientX, clientY: e.clientY}});}\";\nmsg.ui_control = {\n    tabulator: {\n        rowContext: rowContext\n    }\n}\n    \nmsg.payload = table;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 260,
        "wires": [
            [
                "32ac04d1f6fe6e9e"
            ]
        ]
    },
    {
        "id": "20322f0058561fd5",
        "type": "daemon",
        "z": "08ebeea6e2046abd",
        "name": "",
        "command": "salt-master",
        "args": "-l debug",
        "autorun": false,
        "cr": false,
        "redo": true,
        "op": "string",
        "closer": "SIGTERM",
        "x": 790,
        "y": 120,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "941674b482aa389f",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "restart mgr agent",
        "func": "msg.kill =  true;\nmsg.start = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 120,
        "wires": [
            [
                "20322f0058561fd5"
            ]
        ]
    },
    {
        "id": "27206406fc11d2ef",
        "type": "inject",
        "z": "08ebeea6e2046abd",
        "name": "init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "d8c7f242128e6d08",
                "fd6fa0f7672dae01"
            ]
        ]
    },
    {
        "id": "acf4447a9db5dc4c",
        "type": "ui_context_menu",
        "z": "08ebeea6e2046abd",
        "group": "2bfbf363d31643c1",
        "order": 9,
        "width": 1,
        "height": 1,
        "fontSize": 16,
        "inputPositionXField": "payload.clientX",
        "inputPositionXType": "msg",
        "inputPositionYField": "payload.clientY",
        "inputPositionYType": "msg",
        "outputField": "payload",
        "inputMenuField": "menu",
        "inputMenuType": "fixed",
        "menuItems": [
            {
                "id": "",
                "icon": "",
                "label": "Accept",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "",
                "icon": "",
                "label": "Reject",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "",
                "icon": "",
                "label": "Delete",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            }
        ],
        "colors": "theme",
        "textColor": "#000000",
        "backgroundColor": "#ffffff",
        "borderColor": "#626262",
        "intervalLength": 0,
        "intervalUnit": "secs",
        "startTimerAtOpen": false,
        "startTimerAtLeave": true,
        "stopTimerAtEnter": true,
        "name": "pending nodes ctx",
        "x": 810,
        "y": 320,
        "wires": [
            [
                "7965e8cf8c0f94ee"
            ]
        ]
    },
    {
        "id": "7965e8cf8c0f94ee",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "handle context menu",
        "func": "if (msg.payload.toLowerCase() === 'delete') {\n    const node_id = msg.sourceMsg.payload.row.node;\n    msg.payload = \"salt-key -y -d \" + node_id;\n} else if (msg.payload.toLowerCase() === 'accept') {\n    const node_id = msg.sourceMsg.payload.row.node;\n    msg.payload = \"salt-key -y -a \" + node_id;\n} else if (msg.payload.toLowerCase() === 'reject') {\n    const node_id = msg.sourceMsg.payload.row.node;\n    msg.payload = \"salt-key -y -r \" + node_id;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 340,
        "wires": [
            [
                "430201fe36756d7b"
            ]
        ]
    },
    {
        "id": "430201fe36756d7b",
        "type": "exec",
        "z": "08ebeea6e2046abd",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "salt-key cmd",
        "x": 1290,
        "y": 340,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d8c7f242128e6d08",
        "type": "ui_button",
        "z": "08ebeea6e2046abd",
        "name": "restart salt master",
        "group": "2bfbf363d31643c1",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "Restart Salt",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 310,
        "y": 120,
        "wires": [
            [
                "941674b482aa389f"
            ]
        ]
    },
    {
        "id": "fd6fa0f7672dae01",
        "type": "ui_button",
        "z": "08ebeea6e2046abd",
        "name": "sync beacons",
        "group": "2bfbf363d31643c1",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "Sync Beacons",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 300,
        "y": 200,
        "wires": [
            [
                "d6147e86664e5e9b"
            ]
        ]
    },
    {
        "id": "3e0cb6f98233ae1e",
        "type": "complete",
        "z": "08ebeea6e2046abd",
        "name": "sync beacons trigger",
        "scope": [
            "1e980162154930d3",
            "430201fe36756d7b"
        ],
        "uncaught": false,
        "x": 90,
        "y": 200,
        "wires": [
            [
                "fd6fa0f7672dae01"
            ]
        ]
    },
    {
        "id": "c66030ce72b513a0",
        "type": "ui_table",
        "z": "08ebeea6e2046abd",
        "group": "90cedd2a8446aa03",
        "name": "Rejected Minions",
        "order": 1,
        "width": 6,
        "height": 1,
        "columns": [
            {
                "field": "node",
                "title": "Node",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 550,
        "y": 380,
        "wires": [
            [
                "82b1693fd1f95a9a"
            ]
        ]
    },
    {
        "id": "75933c13fdf23b68",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "rejected minion data",
        "func": "if (msg.payload.length === 0) return null;\nvar json = JSON.parse(msg.payload);\nvar table = json[\"minions_rejected\"].map((node) => (\n    {\n        \"node\": node,\n    }\n    ));\nconst rowContext = \"function (e, row) { e.preventDefault(); console.log(\\\"Right clickt! \\\", row.getData());console.log(\\\"e event:\\\", e); this.send({payload: {row: row.getData(), clientX: e.clientX, clientY: e.clientY}});}\";\nmsg.ui_control = {\n    tabulator: {\n        rowContext: rowContext\n    }\n}\n    \nmsg.payload = table;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 440,
        "wires": [
            [
                "c66030ce72b513a0"
            ]
        ]
    },
    {
        "id": "7876ca71a72f89cd",
        "type": "ui_button",
        "z": "08ebeea6e2046abd",
        "name": "",
        "group": "90cedd2a8446aa03",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Delete All",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 220,
        "y": 500,
        "wires": [
            [
                "56b4fe9fdbfea327"
            ]
        ]
    },
    {
        "id": "cbadd1ff66949d65",
        "type": "debug",
        "z": "08ebeea6e2046abd",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 520,
        "wires": []
    },
    {
        "id": "82b1693fd1f95a9a",
        "type": "ui_context_menu",
        "z": "08ebeea6e2046abd",
        "group": "90cedd2a8446aa03",
        "order": 5,
        "width": 1,
        "height": 1,
        "fontSize": 16,
        "inputPositionXField": "payload.clientX",
        "inputPositionXType": "msg",
        "inputPositionYField": "payload.clientY",
        "inputPositionYType": "msg",
        "outputField": "payload",
        "inputMenuField": "menu",
        "inputMenuType": "fixed",
        "menuItems": [
            {
                "id": "",
                "icon": "",
                "label": "Delete",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            }
        ],
        "colors": "theme",
        "textColor": "#000000",
        "backgroundColor": "#ffffff",
        "borderColor": "#626262",
        "intervalLength": 0,
        "intervalUnit": "secs",
        "startTimerAtOpen": false,
        "startTimerAtLeave": true,
        "stopTimerAtEnter": true,
        "name": "rejected nodes ctx",
        "x": 810,
        "y": 380,
        "wires": [
            [
                "7965e8cf8c0f94ee"
            ]
        ]
    },
    {
        "id": "56b4fe9fdbfea327",
        "type": "exec",
        "z": "08ebeea6e2046abd",
        "command": "salt-key -L -r --output json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "30",
        "winHide": false,
        "oldrc": false,
        "name": "probe minions",
        "x": 480,
        "y": 500,
        "wires": [
            [
                "4991dec486cbc8e7"
            ],
            [],
            []
        ]
    },
    {
        "id": "4991dec486cbc8e7",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "delete all rejected",
        "func": "if (msg.payload.length === 0) return null;\nvar json = JSON.parse(msg.payload);\nvar table = json[\"minions_rejected\"].map((node) => (\n    {\n        \"node\": node,\n    }\n    ));\n\ntable.forEach(function (row) {\n    // Create a new message for each row\n    var msg = {\n        payload: \"salt-key -y -d \" + row.node\n    };\n\n    // Send the message to the next node or debug it\n    node.send(msg);\n});\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 500,
        "wires": [
            [
                "430201fe36756d7b"
            ]
        ]
    },
    {
        "id": "cbb5141d17c16d5c",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "set cert pw cfg",
        "func": "global.set('CERT_PW_CFG', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "a1954ee40501addf",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "set cert tag cfg",
        "func": "global.set('CERT_TAG_CFG', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "885b77a57ea1e3ac",
        "type": "inject",
        "z": "9a56025e8414a3d5",
        "name": "Sample",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "9f2cb0d80444b4ab"
            ]
        ]
    },
    {
        "id": "9f2cb0d80444b4ab",
        "type": "function",
        "z": "9a56025e8414a3d5",
        "name": "Mock data generator",
        "func": "const originalCities = [\n  { city: \"New York City\", state: \"NY\" },\n  { city: \"Los Angeles\", state: \"CA\" },\n  { city: \"Chicago\", state: \"IL\" },\n  { city: \"Houston\", state: \"TX\" },\n  { city: \"Phoenix\", state: \"AZ\" },\n  { city: \"Philadelphia\", state: \"PA\" },\n  { city: \"San Antonio\", state: \"TX\" },\n  { city: \"San Diego\", state: \"CA\" },\n]\nconst store = global.get(\"tableData\", \"file\")\nconst cities = store\n  ? store.map((item) => {\n      return { city: item.city, state: item.state }\n    })\n  : originalCities\nmsg.payload = cities.map((cityObj) => {\n  return {\n    city: cityObj.city,\n    state: cityObj.state,\n    temperature: Math.round(-20 + 140 * Math.random()),\n    humidity: Math.round(100 * Math.random()),\n  }\n})\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 60,
        "wires": [
            [
                "d7974a7d5a52bbfa",
                "7ddd4c1bce5dfe32"
            ]
        ]
    },
    {
        "id": "4048f14b0d7195b5",
        "type": "ui_table",
        "z": "9a56025e8414a3d5",
        "group": "241a7fce59ba6ffb",
        "name": "Table #2",
        "order": 5,
        "width": 16,
        "height": 3,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 720,
        "y": 200,
        "wires": [
            [
                "3c7c3eadaffd6355",
                "4462413a63e4b79f"
            ]
        ]
    },
    {
        "id": "d7974a7d5a52bbfa",
        "type": "function",
        "z": "9a56025e8414a3d5",
        "name": "Table manager",
        "func": "///////////////\n// Functions //\n///////////////\n\n// Find a city object in the data store\nfunction byKey(obj) {\n  return function (item) {\n    return item.city === obj.city && item.state === obj.state\n  }\n}\n\n// Row object going to table\nfunction makeObj(id, obj) {\n  const colors = [\"#B2FFFF\", \"#00FF00\", \"#FF0000\"]\n  obj.id = id\n  const idx = obj.temperature < 50 ? 0 : obj.temperature < 80 ? 1 : 2\n  obj.displayTemperature = `<font color=\"${colors[idx]}\">${obj.temperature}</font>`\n  return obj\n}\n\n// Parameterized array sort function\nfunction sorterFactory(obj) {\n  let { column, dir } = obj[0]\n  column = column === \"displayTemperature\" ? \"temperature\" : column\n  return function sorter(itemA, itemB) {\n    const a = itemA[column]\n    const b = itemB[column]\n    const factor = dir === \"asc\" ? +1 : -1\n    return a < b ? -1 * factor : a > b ? +1 * factor : 0\n  }\n}\n\n// Sort data store based on selected table sort\nfunction sortStore(store) {\n  let obj = global.get(\"tableSort\", \"file\")\n  if (!obj || (obj && !obj.sorters.length)) {\n    return\n  }\n  store.sort(sorterFactory(obj.sorters))\n  for (let i = 0; i < store.length; i++) {\n    store[i].id = i < obj.ids.length ? obj.ids[i] : i\n  }\n}\n\n////////////////\n// Processing //\n////////////////\nconst cityObjArray = Array.isArray(msg.payload) ? msg.payload : [msg.payload]\nlet store = global.get(\"tableData\", \"file\") || []\n\n// When dashboard is reloaded or when\n// flows start, display last table state\nif (msg.refresh) {\n  return { payload: store }\n}\n\nlet sendStore = false\nlet deletedRows = []\nfor (let cityObj of cityObjArray) {\n  if (cityObj.delete) {\n    const idx = store.findIndex(byKey(cityObj))\n    if (idx !== -1) {\n      deletedRows.push({ id: store[idx].id, idx })\n    }\n  } else {\n    sendStore = true\n    let obj = store.find(byKey(cityObj))\n    const id = obj ? obj.id : store.length\n    const row = makeObj(id, cityObj) // This is the row that is sent to table\n    if (obj) {\n      Object.assign(obj, row) // Update store (obj is an item of mutable array)\n    } else {\n      store.push(row) // Append to store\n    }\n  }\n}\nif (deletedRows.length) {\n  // Tabulator does not have a single commmand to delete multiple rows at a time\n  deletedRows.forEach((obj) => {\n    msg.payload = {\n      command: \"deleteRow\",\n      arguments: [obj.id],\n    }\n    node.send(msg)\n    store.splice(obj.idx, 1)\n  })\n}\nif (sendStore) {\n  sortStore(store)\n  msg.payload = {\n    command: \"updateOrAddData\",\n    arguments: [store],\n  }\n  node.send(msg)\n}\nglobal.set(\"tableData\", store, \"file\")\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "clone",
                "module": "clone"
            }
        ],
        "x": 540,
        "y": 160,
        "wires": [
            [
                "0f61c07cc7630837",
                "4048f14b0d7195b5"
            ]
        ]
    },
    {
        "id": "681c3a0bf4be8f33",
        "type": "inject",
        "z": "9a56025e8414a3d5",
        "name": "Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "change",
        "payloadType": "str",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "929c2e6d31291d23"
            ]
        ]
    },
    {
        "id": "929c2e6d31291d23",
        "type": "function",
        "z": "9a56025e8414a3d5",
        "name": "Init table",
        "func": "if ([\"connect\", \"change\"].includes(msg.payload)) {\n  const fields = [\"city\", \"state\", \"displayTemperature\", \"humidity\"]\n  const tempSorter =\n    \"function (a, b, aRow, bRow, column, dir, sorterParams) { const aNum = aRow.getData().temperature; const bNum = bRow.getData().temperature;return aNum-bNum}\"\n  const dataSorted =\n    \"function (sorters, rows) { const ret = sorters.map((item) => { return { column: item.field, dir: item.dir }});const ids = rows.map((item)=>item.getData().id);this.send({payload:{sorters:ret,ids}});}\"\n  msg = {}\n  msg.refresh = true\n  msg.payload = []\n  msg.ui_control = {\n    tabulator: {\n      initialSort: (global.get(\"tableSort\", \"file\") || {}).sorters || [],\n      dataSorted,\n      columns: [\n        {\n          field: \"id\",\n          title: \"ID\",\n          align: \"center\",\n          sorter: \"number\",\n        },\n        {\n          field: \"city\",\n          title: \"City\",\n          align: \"center\",\n          sorter: \"string\",\n        },\n        {\n          field: \"state\",\n          title: \"State\",\n          align: \"center\",\n          sorter: \"string\",\n        },\n        {\n          field: \"displayTemperature\",\n          title: \"Temperature [\\u00b0F]\",\n          align: \"center\",\n          sorter: tempSorter,\n          formatter: \"html\",\n        },\n        {\n          field: \"humidity\",\n          title: \"Humidity [%]\",\n          align: \"center\",\n          sorter: \"number\",\n        },\n      ],\n    },\n  }\n  return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 280,
        "wires": [
            [
                "4048f14b0d7195b5",
                "0ec87ff34a660692",
                "d7974a7d5a52bbfa"
            ]
        ]
    },
    {
        "id": "b106ce5bec21c7bb",
        "type": "promptinput",
        "z": "9a56025e8414a3d5",
        "name": "City to delete",
        "datatype": "str",
        "prompt": "What city to delete?",
        "property": "payload",
        "propertyType": "msg",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "8ac7c8d417c703dd"
            ]
        ]
    },
    {
        "id": "8d4de88d88908211",
        "type": "promptinput",
        "z": "9a56025e8414a3d5",
        "name": "City to add",
        "datatype": "str",
        "prompt": "City to add?",
        "property": "payload",
        "propertyType": "msg",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "8e6c70000f600c13"
            ]
        ]
    },
    {
        "id": "9abb64c652472d61",
        "type": "change",
        "z": "9a56025e8414a3d5",
        "name": "Save sort",
        "rules": [
            {
                "t": "set",
                "p": "#:(file)::tableSort",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3c7c3eadaffd6355",
        "type": "debug",
        "z": "9a56025e8414a3d5",
        "name": "Table output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "0ec87ff34a660692",
        "type": "debug",
        "z": "9a56025e8414a3d5",
        "name": "Table init",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 320,
        "wires": []
    },
    {
        "id": "0f61c07cc7630837",
        "type": "debug",
        "z": "9a56025e8414a3d5",
        "name": "Table manager",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 120,
        "wires": []
    },
    {
        "id": "fcf8b936f83d85a5",
        "type": "ui_ui_control",
        "z": "9a56025e8414a3d5",
        "name": "Refresh",
        "events": "all",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "929c2e6d31291d23"
            ]
        ]
    },
    {
        "id": "4462413a63e4b79f",
        "type": "switch",
        "z": "9a56025e8414a3d5",
        "name": "Non-empty sorter?",
        "property": "payload.sorters.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 180,
        "wires": [
            [
                "9abb64c652472d61"
            ]
        ],
        "outputLabels": [
            "Yes"
        ]
    },
    {
        "id": "8ac7c8d417c703dd",
        "type": "function",
        "z": "9a56025e8414a3d5",
        "name": "Process",
        "func": "const tokens = msg.payload.split(\",\").map((item) => item.trim())\nmsg.payload = { city: tokens[0], state: tokens[1], delete: true }\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 120,
        "wires": [
            [
                "d7974a7d5a52bbfa"
            ]
        ]
    },
    {
        "id": "8e6c70000f600c13",
        "type": "function",
        "z": "9a56025e8414a3d5",
        "name": "Process",
        "func": "const tokens = msg.payload.split(\",\").map((item) => item.trim())\nmsg.payload = {\n  city: tokens[0],\n  state: tokens[1],\n  temperature: Math.round(-20 + 140 * Math.random()),\n  humidity: Math.round(100 * Math.random()),\n}\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            [
                "d7974a7d5a52bbfa"
            ]
        ]
    },
    {
        "id": "7ddd4c1bce5dfe32",
        "type": "ui_table",
        "z": "9a56025e8414a3d5",
        "group": "241a7fce59ba6ffb",
        "name": "Table #1",
        "order": 2,
        "width": 16,
        "height": 3,
        "columns": [
            {
                "field": "id",
                "title": "ID",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "city",
                "title": "City",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "state",
                "title": "State",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "temperature",
                "title": "Temperature [*F]",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "humidity",
                "title": "Humidity [%]",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 720,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a6d043a9b6a363b0",
        "type": "ui_text",
        "z": "9a56025e8414a3d5",
        "group": "241a7fce59ba6ffb",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Table #2 header",
        "label": "Table 2",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 320,
        "wires": []
    },
    {
        "id": "31bc4bfda3c76ad9",
        "type": "ui_text",
        "z": "9a56025e8414a3d5",
        "group": "241a7fce59ba6ffb",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Table #1 header",
        "label": "Table 1",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 740,
        "y": 280,
        "wires": []
    },
    {
        "id": "a02a8d1ae54e84f1",
        "type": "ui_button",
        "z": "9a56025e8414a3d5",
        "name": "Sample",
        "group": "241a7fce59ba6ffb",
        "order": 8,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Sample",
        "tooltip": "Generate new data",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 80,
        "wires": [
            [
                "9f2cb0d80444b4ab"
            ]
        ]
    }
]