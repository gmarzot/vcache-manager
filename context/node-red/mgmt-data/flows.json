[
    {
        "id": "953eb73365d84859",
        "type": "tab",
        "label": "Monitor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "974b87f71963749f",
        "type": "tab",
        "label": "Node Detail ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "26063e3cce767688",
        "type": "tab",
        "label": "Node Detail Admin",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "11df8122a3459712",
        "type": "tab",
        "label": "Configure",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "08ebeea6e2046abd",
        "type": "tab",
        "label": "Provision",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fa2fab6babb7f320",
        "type": "tab",
        "label": "Admin",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "84f8ac6cd53e32a0",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4f6b87ae.7d3bb",
        "type": "subflow",
        "name": "List Files",
        "info": "# List files\n\nWill list files in a directory.\n\nPath can be set in `msg.payload` or by setting the `DIRECTORY` environment variable.\n\nExtensions can be filtered by settings the `EXTENSIONS` environment variable to an Array of extensions.\n",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "cf0b484b.b70c9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 40,
                "wires": [
                    {
                        "id": "13486428.bcfc4c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DIRECTORY",
                "type": "str",
                "value": ""
            },
            {
                "name": "EXTENSIONS",
                "type": "json",
                "value": "[]"
            }
        ]
    },
    {
        "id": "052b56c89572e05e",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Lucida Sans Typewriter,Lucida Console,Monaco,monospace",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Lucida Sans Typewriter,Lucida Console,Monaco,monospace"
                }
            },
            "angularTheme": {
                "primary": "light-green",
                "accents": "light-green",
                "warn": "red",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "vCache Manager",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 0,
                "gy": 0,
                "cx": 0,
                "cy": 0,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "01520deab0927305",
        "type": "ui_tab",
        "name": "Monitor",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "66d92f18708659f1",
        "type": "ui_group",
        "name": "vCache Nodes",
        "tab": "01520deab0927305",
        "order": 1,
        "disp": true,
        "width": 23,
        "collapse": true,
        "className": ""
    },
    {
        "id": "2bfbf363d31643c1",
        "type": "ui_group",
        "name": "Pending Nodes",
        "tab": "94c965dfa02ebec9",
        "order": 1,
        "disp": true,
        "width": 23,
        "collapse": true,
        "className": ""
    },
    {
        "id": "2871cce383627674",
        "type": "ui_group",
        "name": "Certificate Update",
        "tab": "66f7a7293d482a39",
        "order": 5,
        "disp": true,
        "width": "23",
        "collapse": true,
        "className": ""
    },
    {
        "id": "92ca2c694d9d5c55",
        "type": "redis-config",
        "name": "vcache_mgr_redis:6379",
        "options": "{\"host\":\"vcache_mgr_redis\",\"db\":0}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "94c965dfa02ebec9",
        "type": "ui_tab",
        "name": "Provision",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "90cedd2a8446aa03",
        "type": "ui_group",
        "name": "Rejected Nodes",
        "tab": "94c965dfa02ebec9",
        "order": 2,
        "disp": true,
        "width": 23,
        "collapse": true,
        "className": ""
    },
    {
        "id": "66f7a7293d482a39",
        "type": "ui_tab",
        "name": "Configure",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "acc467dc501a1809",
        "type": "ui_group",
        "name": "Bulk Deploy",
        "tab": "94c965dfa02ebec9",
        "order": 3,
        "disp": true,
        "width": 23,
        "collapse": true,
        "className": ""
    },
    {
        "id": "d898c7987d10b482",
        "type": "ui_group",
        "name": "System Metrics",
        "tab": "c9737b27c85dc8ad",
        "order": 1,
        "disp": true,
        "width": 23,
        "collapse": true,
        "className": ""
    },
    {
        "id": "3a38c87d0066b087",
        "type": "ui_group",
        "name": "Cache Metrics",
        "tab": "c9737b27c85dc8ad",
        "order": 3,
        "disp": true,
        "width": 23,
        "collapse": true,
        "className": ""
    },
    {
        "id": "3733aad54f7e21ab",
        "type": "ui_group",
        "name": "Operational Metrics",
        "tab": "c9737b27c85dc8ad",
        "order": 2,
        "disp": true,
        "width": 23,
        "collapse": true,
        "className": ""
    },
    {
        "id": "c9737b27c85dc8ad",
        "type": "ui_tab",
        "name": "Node Details",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "3a88c0294b97b966",
        "type": "ui_group",
        "name": "Config Update",
        "tab": "66f7a7293d482a39",
        "order": 6,
        "disp": true,
        "width": "23",
        "collapse": true,
        "className": ""
    },
    {
        "id": "70108d42c5062b9b",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "e56af5576f1d6bc3",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "7c77c1c802c3d49e",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "efee1074751ba4b5",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "9ff3605c62cfb7e6",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "638e2b98317b14c8",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "c3ca124962abc5a6",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "2bfbf363d31643c1",
        "order": 12,
        "width": 16,
        "height": 1
    },
    {
        "id": "248745e9929e07ed",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "90cedd2a8446aa03",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "c6d82079a70e395b",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "90cedd2a8446aa03",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "b1a3187a05c0ec9e",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "90cedd2a8446aa03",
        "order": 5,
        "width": 10,
        "height": 1
    },
    {
        "id": "e5fbacfb37fa81cf",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "90cedd2a8446aa03",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "ff3b1e18618ba751",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "90cedd2a8446aa03",
        "order": 8,
        "width": 16,
        "height": 1
    },
    {
        "id": "7a8655f52edc2ae8",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "acc467dc501a1809",
        "order": 3,
        "width": 16,
        "height": 1
    },
    {
        "id": "4ef60a02f6ea9b1f",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "acc467dc501a1809",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "8d5e01ab1f8e97c2",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "acc467dc501a1809",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "760bb6179dc0fdd4",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "acc467dc501a1809",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "9ce0b5bd179bc9d9",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "acc467dc501a1809",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "c94013116ae577fb",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "acc467dc501a1809",
        "order": 12,
        "width": 2,
        "height": 1
    },
    {
        "id": "0c7569b4c143a481",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "acc467dc501a1809",
        "order": 15,
        "width": 16,
        "height": 1
    },
    {
        "id": "ab2e06beafc1a73c",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "acc467dc501a1809",
        "order": 16,
        "width": 3,
        "height": 1
    },
    {
        "id": "47ac9be9d755aee1",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "acc467dc501a1809",
        "order": 18,
        "width": 14,
        "height": 1
    },
    {
        "id": "b593faa3a706f59c",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "66d92f18708659f1",
        "order": 4,
        "width": 17,
        "height": 1
    },
    {
        "id": "07348f93a10a8484",
        "type": "ui_group",
        "name": "Target Nodes",
        "tab": "66f7a7293d482a39",
        "order": 1,
        "disp": true,
        "width": "23",
        "collapse": false,
        "className": ""
    },
    {
        "id": "90adafdb577e8dde",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "07348f93a10a8484",
        "order": 1,
        "width": 15,
        "height": 1
    },
    {
        "id": "3c6f78894132ac02",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "07348f93a10a8484",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "d1acf2e41d798b38",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "07348f93a10a8484",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "eef5df1696d9d959",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "07348f93a10a8484",
        "order": 6,
        "width": 3,
        "height": 1
    },
    {
        "id": "1238b9d4101199e8",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "07348f93a10a8484",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "d0c5d777968d1196",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "07348f93a10a8484",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "338268c383197566",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "07348f93a10a8484",
        "order": 10,
        "width": 15,
        "height": 1
    },
    {
        "id": "c23a90ad1688099d",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "07348f93a10a8484",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "f28462bc561732ab",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "07348f93a10a8484",
        "order": 12,
        "width": 2,
        "height": 1
    },
    {
        "id": "706f5289a8a6b05f",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "07348f93a10a8484",
        "order": 14,
        "width": 18,
        "height": 1
    },
    {
        "id": "8ef748bc68c3d068",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "426dacf8d92973ec",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 3,
        "width": 17,
        "height": 1
    },
    {
        "id": "c114c28c47b5e13e",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "c74676c792e908d4",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 6,
        "width": 3,
        "height": 1
    },
    {
        "id": "081f4ff6baf98a77",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "8a9dc3a96e046070",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 10,
        "width": 3,
        "height": 1
    },
    {
        "id": "b01a1f3669be78d8",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 11,
        "width": 9,
        "height": 1
    },
    {
        "id": "5f2b75014a3c5baf",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "2871cce383627674",
        "order": 13,
        "width": 8,
        "height": 1
    },
    {
        "id": "db779e0c3e44117d",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "3a88c0294b97b966",
        "order": 1,
        "width": 23,
        "height": 1
    },
    {
        "id": "7eb6c0c86719b8d7",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "3a88c0294b97b966",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "bd34aa3d8f0a35a6",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "3a88c0294b97b966",
        "order": 4,
        "width": 4,
        "height": 1
    },
    {
        "id": "3189a7f402d81b68",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "3a88c0294b97b966",
        "order": 6,
        "width": 3,
        "height": 1
    },
    {
        "id": "00fc31cc341007b7",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "3a88c0294b97b966",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "03a72c28cb28bc11",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "3a88c0294b97b966",
        "order": 9,
        "width": 9,
        "height": 1
    },
    {
        "id": "c75b16cb6cb03f56",
        "type": "ui_spacer",
        "z": "11df8122a3459712",
        "name": "spacer",
        "group": "3a88c0294b97b966",
        "order": 11,
        "width": 8,
        "height": 1
    },
    {
        "id": "345b053b0ab90b64",
        "type": "ui_tab",
        "name": "Admin",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a60c456977c4f620",
        "type": "ui_group",
        "name": "Local Management System",
        "tab": "345b053b0ab90b64",
        "order": 1,
        "disp": true,
        "width": "23",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f1217b32bda055e4",
        "type": "ui_group",
        "name": "Certificate Update",
        "tab": "345b053b0ab90b64",
        "order": 2,
        "disp": true,
        "width": 23,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3c055d5fa85d4ea9",
        "type": "ui_group",
        "name": "Config Update",
        "tab": "345b053b0ab90b64",
        "order": 3,
        "disp": true,
        "width": 23,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7ae14e44339997db",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "a60c456977c4f620",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "1170fcae3ea209e5",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "a60c456977c4f620",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "5c4819e9c1700e39",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "a60c456977c4f620",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "d0c1a4c1d8328d39",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "a60c456977c4f620",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "8c30e0fea3b8bc7c",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "a60c456977c4f620",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "391349f548dd250a",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "a60c456977c4f620",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "65f3a05442a6f33f",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "a60c456977c4f620",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "28a3e4d3f2847815",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "f1217b32bda055e4",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "d5f92790f7cb77ce",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "f1217b32bda055e4",
        "order": 3,
        "width": 17,
        "height": 1
    },
    {
        "id": "7e6884a5d272f070",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "f1217b32bda055e4",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "f08fcefd2bd312fb",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "f1217b32bda055e4",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "2c0ba20811de0260",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "f1217b32bda055e4",
        "order": 8,
        "width": 4,
        "height": 1
    },
    {
        "id": "bb4c26f4ab6b8368",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "f1217b32bda055e4",
        "order": 10,
        "width": 3,
        "height": 1
    },
    {
        "id": "c95b5f2cd4d29882",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "f1217b32bda055e4",
        "order": 11,
        "width": 8,
        "height": 1
    },
    {
        "id": "548abdfb6dac9b70",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "f1217b32bda055e4",
        "order": 13,
        "width": 9,
        "height": 1
    },
    {
        "id": "b26317cfa2de0246",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "3c055d5fa85d4ea9",
        "order": 1,
        "width": 23,
        "height": 1
    },
    {
        "id": "f2fae0a55bba3137",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "3c055d5fa85d4ea9",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "773d7e4e2fa286ed",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "3c055d5fa85d4ea9",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "c3c26e613fad5084",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "3c055d5fa85d4ea9",
        "order": 6,
        "width": 4,
        "height": 1
    },
    {
        "id": "dd88a4bffc2c70a1",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "3c055d5fa85d4ea9",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "8185ad95c6985492",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "3c055d5fa85d4ea9",
        "order": 9,
        "width": 8,
        "height": 1
    },
    {
        "id": "d64a5264669f5fde",
        "type": "ui_spacer",
        "z": "953eb73365d84859",
        "name": "spacer",
        "group": "3c055d5fa85d4ea9",
        "order": 11,
        "width": 9,
        "height": 1
    },
    {
        "id": "f44001f6bfd2c4ae",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "d898c7987d10b482",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "311d8c84e314218f",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "d898c7987d10b482",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "7e68d4ffdb77cb98",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "d898c7987d10b482",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "e8ac47ea3bcaa5b3",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "d898c7987d10b482",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "02cca3702bb7b4a5",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "d898c7987d10b482",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "6ce54587d26639bb",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "d898c7987d10b482",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "595874aaf51788cd",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "d898c7987d10b482",
        "order": 19,
        "width": 2,
        "height": 1
    },
    {
        "id": "7b2483ef5b5877ed",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "d898c7987d10b482",
        "order": 21,
        "width": 3,
        "height": 1
    },
    {
        "id": "dc6d2fc3cd1519d4",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "d898c7987d10b482",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "9a50ceed09062141",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "5efc85ad670b6337",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "ca9aa1ee618b0e86",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "cab43cfa1545ce04",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "f3a2fb0fd48f2f6c",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "c934cd68d3f922b9",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "55fd19faceb4ea51",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "a2608e2a80106783",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "5b1027f19f6e8c54",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "4a954c0ba7c99619",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 16,
        "width": 1,
        "height": 1
    },
    {
        "id": "ef94991ff70f052b",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "3b78e053656fafd7",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3733aad54f7e21ab",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "d368e006e86dad98",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "49ebedef9a5ac4d8",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "5fc04a0ecc129de7",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "836d11c3453bc1c4",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "a5d347208f355637",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "cc179942a53e826f",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "4b1f752619614a7a",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "990d6b5a1f3c7434",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "3f7f0fb42c6f1f0c",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "047847e592912d0a",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "517912c2c15ce826",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 13,
        "width": 1,
        "height": 1
    },
    {
        "id": "88e45286f1703f92",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "ee620e1dc6fa4029",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "92f165de12929627",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "e08cfb25ab754e36",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 19,
        "width": 1,
        "height": 1
    },
    {
        "id": "07243a4b58c54852",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "1042b4f1fa214f7b",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 21,
        "width": 1,
        "height": 1
    },
    {
        "id": "eefe91135d9fde37",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "b846d4073cf585c8",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 23,
        "width": 1,
        "height": 1
    },
    {
        "id": "81e38af94a75d066",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "06e94c364b8125dc",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 25,
        "width": 1,
        "height": 1
    },
    {
        "id": "2ed9a8ff5a48b66b",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "44a32477cf4a90ee",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 27,
        "width": 1,
        "height": 1
    },
    {
        "id": "28f86d3d55ded701",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "fddf803b2497e1cc",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 29,
        "width": 1,
        "height": 1
    },
    {
        "id": "6f29dcc305528f88",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 31,
        "width": 1,
        "height": 1
    },
    {
        "id": "eaf72c5b73233858",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 33,
        "width": 1,
        "height": 1
    },
    {
        "id": "ac7960c6165c011b",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 34,
        "width": 1,
        "height": 1
    },
    {
        "id": "8cb2978ebb736cd1",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 36,
        "width": 1,
        "height": 1
    },
    {
        "id": "13de231efe524f08",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 38,
        "width": 1,
        "height": 1
    },
    {
        "id": "3857843ab666f2e3",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 39,
        "width": 1,
        "height": 1
    },
    {
        "id": "1f343c7349d4e4bc",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 40,
        "width": 1,
        "height": 1
    },
    {
        "id": "63ea17c04489b6d2",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 41,
        "width": 1,
        "height": 1
    },
    {
        "id": "f421813d568ecf0f",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 42,
        "width": 1,
        "height": 1
    },
    {
        "id": "aefd85aedac421ac",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 43,
        "width": 1,
        "height": 1
    },
    {
        "id": "3ee434b01f82fdbf",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 44,
        "width": 1,
        "height": 1
    },
    {
        "id": "db506477ccf4db75",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 45,
        "width": 1,
        "height": 1
    },
    {
        "id": "a33afa550ef34037",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 46,
        "width": 1,
        "height": 1
    },
    {
        "id": "606a6b12972c0d08",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 47,
        "width": 1,
        "height": 1
    },
    {
        "id": "580da7bf9125e170",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 48,
        "width": 1,
        "height": 1
    },
    {
        "id": "81fcd0ed1e6750f4",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 50,
        "width": 1,
        "height": 1
    },
    {
        "id": "ab26227401cbce16",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 52,
        "width": 1,
        "height": 1
    },
    {
        "id": "2c4c007ec6284a51",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 53,
        "width": 1,
        "height": 1
    },
    {
        "id": "f476b087ee19c67f",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 55,
        "width": 1,
        "height": 1
    },
    {
        "id": "7b7693e1cf83c695",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 57,
        "width": 1,
        "height": 1
    },
    {
        "id": "2af5b81db993e8d5",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 58,
        "width": 1,
        "height": 1
    },
    {
        "id": "d687570094bbbfaf",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 59,
        "width": 1,
        "height": 1
    },
    {
        "id": "818eea3bfd72230c",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 60,
        "width": 1,
        "height": 1
    },
    {
        "id": "25367db3d134a9ff",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 61,
        "width": 1,
        "height": 1
    },
    {
        "id": "3f39e2198e8f8784",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 62,
        "width": 1,
        "height": 1
    },
    {
        "id": "c44a71dfad837fa8",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 63,
        "width": 1,
        "height": 1
    },
    {
        "id": "21db7b65e6aa4cd4",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 64,
        "width": 1,
        "height": 1
    },
    {
        "id": "1afe6d8a9a0b5d0d",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 65,
        "width": 1,
        "height": 1
    },
    {
        "id": "cc1d1824397d98d6",
        "type": "ui_spacer",
        "z": "974b87f71963749f",
        "name": "spacer",
        "group": "3a38c87d0066b087",
        "order": 66,
        "width": 1,
        "height": 1
    },
    {
        "id": "208379c0.81563e",
        "type": "exec",
        "z": "4f6b87ae.7d3bb",
        "command": "ls",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 510,
        "y": 60,
        "wires": [
            [
                "13486428.bcfc4c"
            ],
            [],
            []
        ]
    },
    {
        "id": "13486428.bcfc4c",
        "type": "change",
        "z": "4f6b87ae.7d3bb",
        "name": "split and filter",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "(\t    $files := [$split(payload, '\\n')[$ != \"\"]];\t    $count($env('EXTENSIONS')) = 0 ? [$files] : [$files[$split($, '.')[-1] in $env('EXTENSIONS')]];\t)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "cf0b484b.b70c9",
        "type": "switch",
        "z": "4f6b87ae.7d3bb",
        "name": "",
        "property": "$env('DIRECTORY')",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 80,
        "wires": [
            [
                "208379c0.81563e"
            ],
            [
                "56426a5a.fbc44c"
            ]
        ]
    },
    {
        "id": "56426a5a.fbc44c",
        "type": "change",
        "z": "4f6b87ae.7d3bb",
        "name": "DIRECTORY",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "DIRECTORY",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "208379c0.81563e"
            ]
        ]
    },
    {
        "id": "530b57a13f57ac7e",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "init 1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "start",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 140,
        "wires": [
            [
                "9c1cae2c8cd579f1",
                "8b6caa4128b0ab62"
            ]
        ]
    },
    {
        "id": "466978b03cbfdd40",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "poll 5s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 520,
        "wires": [
            [
                "e573f44cd6952735"
            ]
        ]
    },
    {
        "id": "368b5ea2907b5488",
        "type": "ui_ui_control",
        "z": "953eb73365d84859",
        "name": "Refresh",
        "events": "all",
        "x": 280,
        "y": 580,
        "wires": [
            [
                "27eedc6ffafb236a"
            ]
        ]
    },
    {
        "id": "cc06064e8a1e4629",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "init 2s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "change",
        "payloadType": "str",
        "x": 90,
        "y": 640,
        "wires": [
            [
                "27eedc6ffafb236a"
            ]
        ]
    },
    {
        "id": "27eedc6ffafb236a",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "refresh table",
        "func": "if ([\"connect\", \"change\"].includes(msg.payload)) {\n  const dataSorted =\n    \"function (sorters, rows) { const ret = sorters.map((item) => { return { column: item.field, dir: item.dir }});const ids = rows.map((item)=>item.getData().id);this.send({payload:{sorters:ret,ids}});}\";\n  const rowContext = \"function (e, row) { e.preventDefault(); this.send({payload: {row: row.getData(), clientX: e.clientX, clientY: e.clientY}});}\";\n  const rowSelect = \"function (e, row) { e.preventDefault(); this.send({payload: {row: row.getData(), rowDoubleClick: true}});}\";\n  const effLegend = \"function (value) { if (value==100) value=parseInt(value);return (value > 0) ? '&nbsp;&nbsp;' + value + '&emsp14;%' : '-'; }\";\n  const statusColor = \"function (value) { if (value==0) return 'lightgray'; if (value==1) return 'springgreen'; if (value==2) return 'gold'; if (value==3) return 'red'; return 'black';}\";\n  const useColor = \"function (value) { if (value > 90) return 'red'; if (value > 80) return 'gold'; return 'limegreen';}\";\n  const bpsFormatter = \"function (cell, formatterParams, onRendered) {var value=cell.getValue();if (value == null || isNaN(value) || value < 0) return '-'; if (value <= 1.0) return value+'&emsp14;bps';var k=1024;var sizes=['','K','M','G','T','P','E','Z','Y'];var i=Math.floor(Math.log(value)/Math.log(k));var ret=parseFloat((value/Math.pow(k,i)).toFixed(1)) + '&emsp14;' + sizes[i] +'bps'; return ret;}\";\n  msg = {}; \n  msg.refresh = true\n  msg.payload = []\n  msg.ui_control = {\n    tabulator: {\n      rowContext: rowContext,\n      rowDblClick: rowSelect,\n      initialSort: (global.get(\"nodeSort\", \"file\") || {}).sorters || [],\n      dataSorted,\n      columns: [\n//        {\n//          field: \"id\",\n//          title: \"&nbsp;ID\",\n//          align: \"center\",\n//          sorter: \"number\",\n//          width: 45,\n//        },\n        {\n          field: \"node\",\n          title: \"&nbsp;Node\",\n          align: \"left\",\n          sorter: \"string\",\n          width: 237,\n        },\n        {\n          field: \"status\",\n          title: \"&nbsp;Status\",\n          align: \"center\",\n          formatter: \"traffic\",\n          formatterParams: {\n            color: statusColor,\n          },\n          tooltips: function (cell) {\n            const status = cell.getRow().getData().status\n            return status;\n          },\n          sorter: \"string\",\n          width: 94,\n        },\n        {\n          field: \"uptime\",\n          title: \"&nbsp;Uptime\",\n          align: \"center\",\n          sorter: \"string\",\n          width: 113,\n        },\n        {\n          field: \"cpu_use_pct\",\n          title: \"&nbsp;&nbsp;CPU\",\n          align: \"left\",\n          formatter: \"progress\",\n          formatterParams: {\n            legend: effLegend,\n            legendColor: \"#ffffff\",\n            legendAlign: \"center\",\n            color: useColor\n          },\n          sorter: \"number\",\n          width: 82,\n          cssClass: \"progresslegend\",\n        }, \n        {\n          field: \"mem_use_pct\",\n          title: \"&nbsp;&nbsp;RAM\",\n          align: \"left\",\n          formatter: \"progress\",\n          formatterParams: {\n            legend: effLegend,\n            legendColor: \"#ffffff\",\n            legendAlign: \"center\",\n            color: useColor\n          },\n          sorter: \"number\",\n          width: 82,\n          cssClass: \"progresslegend\",\n        },\n        {\n          field: \"disk_use_pct\",\n          title: \"&nbsp;&nbsp;HD\",\n          align: \"left\",\n          formatter: \"progress\",\n          formatterParams: {\n            legend: effLegend,\n            legendColor: \"#ffffff\",\n            legendAlign: \"center\",\n            color: useColor\n          },\n          sorter: \"number\",\n          width: 82,\n          cssClass: \"progresslegend\",\n        },\n        {\n          field: \"client_bw\",\n          title: \"&nbsp;BW &#129095;\",\n          align: \"center\",\n          sorter: \"number\",\n          formatter: bpsFormatter,\n          width: 90,\n        }, \n        {\n          field: \"upstream_bw\",\n          title: \"&nbsp;BW &#129093;\",\n          align: \"center\",\n          sorter: \"number\",\n          formatter: bpsFormatter,\n          width: 90,\n        },\n        {\n          field: \"client_sess\",\n          title: \"&nbsp;Users\",\n          align: \"center\",\n          sorter: \"number\",\n          width: 85,\n        },\n        {\n          field: \"cache_eff_pct\",\n          title: \"&nbsp;&nbsp;Cache Eff\",\n          align: \"left\",\n          formatter: \"progress\",\n          formatterParams: {\n            legend: effLegend,\n            legendColor: \"#ffffff\",\n            legendAlign: \"center\",\n          },\n          sorter: \"number\",\n          cssClass: \"progresslegend\",\n        },\n      ],\n    },\n  }\n  return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 640,
        "wires": [
            [
                "567783dfb28f09df",
                "c347b6521867b6fb"
            ]
        ]
    },
    {
        "id": "c347b6521867b6fb",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "node table manager",
        "func": "///////////////\n// Functions //\n///////////////\n\nfunction byKey(obj) {\n  return function (item) {\n    return item.node === obj.node;\n  }\n}\n\nfunction byVal(val) {\n  return function (item) {\n    return item == val;\n  }\n}\n\n// Row object going to table\nfunction makeObj(obj) {\n  const colors = [\"#C8E6C8\", \"#64A064\", \"#1E461E\"]\n  const idx = obj.cache_eff_pct < 25 ? 0 : obj.cache_eff_pct < 50 ? 1 : 2\n  obj.displayEff = `<font color=\"${colors[idx]}\">${obj.cache_eff_pct}</font>`\n  return obj\n}\n\n// Parameterized array sort function\nfunction sorterFactory(obj) {\n  let { column, dir } = obj[0]\n  column = column === \"displayEff\" ? \"cache_eff_pct\" : column\n  return function sorter(itemA, itemB) {\n    const a = itemA[column];\n    const b = itemB[column];\n    const factor = dir === \"asc\" ? +1 : -1\n    if (isNaN(a)) {\n      return a < b ? -1 * factor : a > b ? +1 * factor : 0;\n    } else {\n      return (a - b) * factor;\n    }\n  }\n}\n\n// find the next available index of make a new one\nfunction findNextId(store) {\n  const list = [...store].sort((a, b) => a.id - b.id);\n\n  let nextId = 0;\n  for (const item of list) {\n    const id = item.id;\n    if (id == nextId) {\n      nextId++;\n    } else if (id > nextId) {\n      break;\n    }\n  }\n  return nextId;\n}\n\n// find the next available index of make a new one\nfunction findNextIdx(store) {\n  const list = [...store].sort((a, b) => a - b);\n\n  let nextVal = 0;\n  for (const val of list) {\n    if (val == nextVal) {\n      nextVal++;\n    } else if (val > nextVal) {\n      break;\n    }\n  }\n  return nextVal;\n}\n\n// Sort data store based on selected table sort\nfunction sortStore(sort, data) {\n  if (!sort || !sort.hasOwnProperty(\"sorters\")) {\n    node.error(\"sortStore: sort store error\");\n    return\n  }\n\n  data.sort(sorterFactory(sort.sorters));\n  var i;\n  for (i = 0; i < data.length; i++) {\n    if (i < sort.ids.length) {\n      data[i].id = sort.ids[i];\n    } else {\n      data[i].id = sort.ids[i] = findNextIdx(sort.ids);\n      node.warn(\"sortStore: new index not in nodeSort: \" + data[i].id)\n    }\n  }\n  if (sort.ids.length > i) {\n    let n = sort.ids.length - i;\n    node.warn(\"sortStore: trimming nodeSort: \" + n + \" (\" + i + \" to \" + (sort.ids.length-1) + \")\")\n    sort.ids.splice(-n, n);\n  }\n}\n/**\n * Set a key in Redis with an expiration time in seconds using a callback.\n * @param {string} key - The key to set.\n\n */\nasync function testDelKey(key) {\n  // Set the key with the specified value and expiration time\n  let exists = await redis.exists(key);\n  return exists;\n}\n\n////////////////\n// Processing //\n////////////////\nconst redis = global.get(\"redis\", \"file\");\nconst promisify = (fn) => {\n  return (...args) => {\n    return new Promise((resolve, reject) => {\n      fn(...args, function (err, res) {\n        if (err) {\n          return reject(err);\n        }\n        return resolve(res);\n      })\n    })\n  }\n}\nconst existsAsync = promisify(redis.exists).bind(redis);\n\nlet data_store = global.get(\"nodeData\", \"file\") || [];\n\nif (msg.refresh) {\n  return { payload: data_store };\n}\n\nlet sort_store = global.get(\"nodeSort\", \"file\") || [];\nif (!sort_store || !sort_store.hasOwnProperty(\"sorters\") || !sort_store.sorters.length) {\n  sort_store.sorters = [{\n    column: \"node\",\n    dir: \"asc\"\n  }];\n  sort_store.ids = [];\n}\n\nif (Array.isArray(msg.payload)) { // process table data update or add\n  for (let in_row of msg.payload) {\n    in_row = makeObj(in_row) // This is the row that is sent to table\n    let row_data = data_store.find(byKey(in_row));\n    if (!row_data) {\n      const key = \"vcache_node:\" + in_row.node + \":\" + in_row.uuid;\n      if (await testDelKey(\"delete:\" + key)) {\n        node.warn(\"table mgr: new node was deleted: waiting: \" + in_row.node);\n        redis.del(key, function (err, reply) {\n          if (err) {\n            node.error(\"Error deleting key(\" + reply + \"): \", err);\n          } else {\n            node.warn(\"table mgr: node deleted from redis: \" + key)\n          }\n        });\n      } else {\n        in_row.id = findNextId(data_store);\n        node.warn(\"table mgr: node not in data store: \" + in_row.node + \" new id: \" + in_row.id);\n        data_store.push(in_row) // Append to store\n      }\n    } else {\n      Object.assign(row_data, in_row) // Update store (row_data is an item of mutable array)\n    }\n  }\n  for (let i = data_store.length - 1; i >= 0; i--) {\n    let row = data_store[i];\n    let rindx = msg.payload.findIndex(byKey(row));\n    if (rindx < 0) {\n      node.warn(\"table mgr: data store entry not in payload: \" + row.node + \" (\" + row.id + \") - SHOULD DELETE\");\n      var del_msg = {};\n      del_msg.payload = {\n        command: \"deleteRow\",\n        arguments: [row.id],\n      };\n      node.send(del_msg);\n      data_store.splice(i, 1);\n    }\n  }\n  sortStore(sort_store, data_store);\n  msg.payload = {\n    command: \"updateOrAddData\",\n    arguments: [data_store],\n  };\n} else { // process single message - delete\n  // When dashboard is reloaded or when flows start, display last table state\n  let row = msg.payload;\n  if (row.delete) {\n    let idx = data_store.findIndex(byKey(row));\n    if (idx >=0) {\n      data_store.splice(idx, 1);\n      let sidx = sort_store.ids.findIndex(byVal(row.id));\n      if (sidx>=0) {\n        sort_store.ids.splice(sidx, 1);\n      } else {\n        node.warn(\"table mgr: delete: id not found in sort store: \" + row.node + \" (\" + row.id + \"}\"); \n      }\n    } else {\n      node.warn(\"table mgr: delete: node not found in data store: \" + row.node + \" (\" + row.id + \"}\");\n    }\n    msg.payload = {\n      command: \"deleteRow\",\n      arguments: [row.id],\n    };\n  } else {\n    node.warn(\"table mgr: unrecognized message: \" + JSON.stringify(row));\n  }\n}\n\nglobal.set(\"nodeData\", data_store, \"file\");\nglobal.set(\"nodeSort\", sort_store, \"file\");\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "clone",
                "module": "clone"
            }
        ],
        "x": 540,
        "y": 580,
        "wires": [
            [
                "567783dfb28f09df"
            ]
        ]
    },
    {
        "id": "567783dfb28f09df",
        "type": "ui_table",
        "z": "953eb73365d84859",
        "group": "66d92f18708659f1",
        "name": "Nodes",
        "order": 1,
        "width": 23,
        "height": 11,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 490,
        "y": 640,
        "wires": [
            [
                "05143c60bda4315f"
            ]
        ]
    },
    {
        "id": "ce2ff155071f51ec",
        "type": "switch",
        "z": "953eb73365d84859",
        "name": "has sorters",
        "property": "payload.ids.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 620,
        "wires": [
            [],
            [
                "11e6118b3d66d8ed"
            ]
        ],
        "outputLabels": [
            "Yes",
            ""
        ]
    },
    {
        "id": "17f908c5c029e02d",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "re-init table",
        "func": "global.set(\"nodeData\", [], \"nodes\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "3a60dfa8e2ea231a",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 90,
        "y": 700,
        "wires": [
            [
                "17f908c5c029e02d"
            ]
        ]
    },
    {
        "id": "e573f44cd6952735",
        "type": "redis-command",
        "z": "953eb73365d84859",
        "server": "92ca2c694d9d5c55",
        "command": "KEYS",
        "name": "vcache nodes",
        "topic": "vcache_node:*:*",
        "params": "",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 300,
        "y": 520,
        "wires": [
            [
                "3a9bce3d609e11ce"
            ]
        ]
    },
    {
        "id": "f886bb801a5b9919",
        "type": "redis-instance",
        "z": "953eb73365d84859",
        "server": "92ca2c694d9d5c55",
        "name": "vcache_mgr_redis",
        "topic": "redis",
        "location": "global",
        "x": 110,
        "y": 460,
        "wires": []
    },
    {
        "id": "3a9bce3d609e11ce",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "node table data",
        "func": "const redis = global.get('redis'); // Assumes Redis client is globally available\nconst now = Date.now();\nvar table = [];\n/**\n* 3 - CRIT, 2 - WARN, 1 - OK, 0 - UNKNOWN\n* @param {string | number | Date} stamp\n* @param {number} now\n* @param {number} cpu\n* @param {number} mem\n* @param {number} disk\n*/\nfunction calc_status(now, stamp, cpu, mem, disk) {\n    const stamp_ms = new Date(stamp).getTime();\n    const diff = (now - stamp_ms) / 1000;\n    if (diff > 30) return 0;\n    if (cpu > 90 || mem > 90 || disk > 90) return 3;\n    if (cpu > 80 || mem > 80 || disk > 80) return 2;\n    return 1;\n}\n\nfunction convertNum(val) {\n    if (/^\\d+$/.test(val)) {\n        val = parseInt(val);\n    } else if (/^\\d\\.\\d+$/.test(val)) {\n        val = parseFloat(val).toFixed(2);\n    } else if (/^\\d+\\.\\d+$/.test(val)) {\n        val = parseFloat(val).toFixed(1);\n    }\n    return val;\n}\n\nfunction convertHashNum(hash) {\n    if (typeof hash === 'object' || hash === null) {\n        for (const key in hash) {\n            hash[key] = convertNum(hash[key]);\n        }\n    }\n    return hash;\n}\n\n// Function to retrieve hash objects for each key\nfunction get_nodes(keys, callback) {\n    let count = 0;\n    keys.forEach(function (key) {\n        redis.hgetall(key, function (err, hash) {\n            if (err) {\n                callback(err);\n                return;\n            }\n            \n            hash.node = hash.id;\n            delete hash.id;\n\n            hash.status = calc_status(now, hash._stamp, hash.cpu_use_pct, hash.mem_use_pct, hash.disk_use_pct);\n            if (hash.status == 0) {\n                hash.cache_eff_pct = -1;\n                hash.cpu_use_pct = -1;\n                hash.mem_use_pct = -1;\n                hash.disk_use_pct = -1;\n                hash.client_bw = NaN;\n                hash.upstream_bw = NaN;\n                hash.users = NaN;\n                hash.client_sess = \"-\";\n                hash.uptime = \"-\";\n            } else {\n                hash = convertHashNum(hash);\n            }\n            table.push(hash);\n            count++;\n            if (count >= keys.length) {\n                callback(null,table);\n            }\n        });\n    });\n}\n\n// Main function\nget_nodes(msg.payload, function (err, nodes) {\n    if (err) {\n        node.error(err);\n        return;\n    }\n\n    msg.payload = nodes;\n    node.send(msg);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 520,
        "wires": [
            [
                "c347b6521867b6fb"
            ]
        ]
    },
    {
        "id": "da2988f368c4b510",
        "type": "ui_context_menu",
        "z": "953eb73365d84859",
        "group": "66d92f18708659f1",
        "order": 2,
        "width": 3,
        "height": 1,
        "fontSize": 16,
        "inputPositionXField": "payload.clientX",
        "inputPositionXType": "msg",
        "inputPositionYField": "payload.clientY",
        "inputPositionYType": "msg",
        "outputField": "payload",
        "inputMenuField": "menu",
        "inputMenuType": "fixed",
        "menuItems": [
            {
                "id": "",
                "icon": "",
                "label": "Details",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "",
                "icon": "",
                "label": "Configure",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "",
                "icon": "",
                "label": "Delete",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            }
        ],
        "colors": "theme",
        "textColor": "#000000",
        "backgroundColor": "#ffffff",
        "borderColor": "#626262",
        "intervalLength": 0,
        "intervalUnit": "secs",
        "startTimerAtOpen": false,
        "startTimerAtLeave": true,
        "stopTimerAtEnter": true,
        "name": "RowCtxMenu",
        "x": 520,
        "y": 700,
        "wires": [
            [
                "ac59be7fa2383fc7"
            ]
        ]
    },
    {
        "id": "05143c60bda4315f",
        "type": "switch",
        "z": "953eb73365d84859",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "sorters",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "rowDoubleClick",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "clientX",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 730,
        "y": 640,
        "wires": [
            [
                "ce2ff155071f51ec"
            ],
            [
                "11dd7f1faf822026"
            ],
            [
                "da2988f368c4b510"
            ]
        ]
    },
    {
        "id": "f773b77e37a40bb6",
        "type": "uuid",
        "z": "953eb73365d84859",
        "uuidVersion": "v4",
        "namespaceType": "custom",
        "namespace": "VIVOH_CACHE",
        "namespaceCustom": "VIVOH",
        "name": "UUID (gen)",
        "field": "payload",
        "fieldType": "msg",
        "x": 510,
        "y": 120,
        "wires": [
            [
                "51ab9183e6c445ee",
                "03470a367efdaf2e"
            ]
        ]
    },
    {
        "id": "51ab9183e6c445ee",
        "type": "file",
        "z": "953eb73365d84859",
        "name": "vcache-mgr.uuid",
        "filename": "/var/run/vcache-mgr.uuid",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 760,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "9c1cae2c8cd579f1",
        "type": "fs-ops-access",
        "z": "953eb73365d84859",
        "name": "vcache.mgr uuid",
        "path": "/var/run",
        "pathType": "str",
        "filename": "vcache-mgr.uuid",
        "filenameType": "str",
        "read": true,
        "write": true,
        "throwerror": false,
        "x": 300,
        "y": 120,
        "wires": [
            [
                "ac931b189bcafeb4"
            ],
            [
                "f773b77e37a40bb6"
            ]
        ]
    },
    {
        "id": "8b6caa4128b0ab62",
        "type": "fs-ops-access",
        "z": "953eb73365d84859",
        "name": "vcache.mgr version",
        "path": "/var/run/",
        "pathType": "str",
        "filename": "vcache-mgr.version",
        "filenameType": "str",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "28e546a9e90ffb1f"
            ],
            [
                "fc81090b71c2f79e"
            ]
        ]
    },
    {
        "id": "05bef2ebd6355241",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "set global version",
        "func": "global.set(\"version\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 180,
        "wires": [
            [
                "ab8b7a155a8d2732"
            ]
        ]
    },
    {
        "id": "28e546a9e90ffb1f",
        "type": "file in",
        "z": "953eb73365d84859",
        "name": "vcache-mgr.version",
        "filename": "/var/run/vcache-mgr.version",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 530,
        "y": 160,
        "wires": [
            [
                "05bef2ebd6355241"
            ]
        ]
    },
    {
        "id": "03470a367efdaf2e",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "UUID (object)",
        "func": "msg.payload = { \"uuid\": msg.payload.replace(/\\n+$/, '')};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 100,
        "wires": [
            [
                "c5ba86245edf6da7"
            ]
        ]
    },
    {
        "id": "ac931b189bcafeb4",
        "type": "file in",
        "z": "953eb73365d84859",
        "name": "vcache-mgr.uuid",
        "filename": "/var/run/vcache-mgr.uuid",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 520,
        "y": 80,
        "wires": [
            [
                "03470a367efdaf2e"
            ]
        ]
    },
    {
        "id": "c5ba86245edf6da7",
        "type": "redis out",
        "z": "953eb73365d84859",
        "hostname": "vcache_mgr_redis",
        "port": 6379,
        "name": "UUID (out)",
        "key": "vcache_mgr",
        "structtype": "hash",
        "x": 970,
        "y": 100,
        "wires": []
    },
    {
        "id": "ac59be7fa2383fc7",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "handle context menu",
        "func": "msg.topic = msg.payload.toLowerCase();\nconst node_id = msg.sourceMsg.payload.row.node;\n\nif (msg.topic == 'delete') {\n    msg.payload = \"salt-key -y -d \" + node_id;\n} else if (msg.topic == 'accept') {\n    msg.payload = \"salt-key -y -a \" + node_id;\n} else if (msg.topic == 'details') {\n    msg.payload = {\n        row: msg.sourceMsg.payload.row\n    }; \n} else if (msg.topic == 'configure') {\n    global.set(\"cfg_select_flt\", node_id)\n    msg.payload = node_id;\n} else {\n    msg.topic = null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 760,
        "wires": [
            [
                "7ede68d2930d2f9d"
            ]
        ]
    },
    {
        "id": "dedbd31c5db0034f",
        "type": "exec",
        "z": "953eb73365d84859",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "salt-key",
        "x": 940,
        "y": 780,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "7ede68d2930d2f9d",
        "type": "switch",
        "z": "953eb73365d84859",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "details",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "configure",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 730,
        "y": 760,
        "wires": [
            [
                "11dd7f1faf822026"
            ],
            [
                "b9e49c705dadd4fc",
                "dedbd31c5db0034f"
            ],
            [
                "388fa95e75dc405b"
            ]
        ]
    },
    {
        "id": "b9e49c705dadd4fc",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "delete node",
        "func": "/**\n * Set a key in Redis with an expiration time in seconds using a callback.\n * @param {string} key - The key to set.\n * @param {string} value - The value to set.\n * @param {number} seconds - The expiration time in seconds.\n */\nfunction setDelKey(key, value, seconds) {\n    // Set the key with the specified value and expiration time\n    redis.set(key, value, 'EX', seconds, (error, result) => {\n        if (error) {\n            node.error(\"setDeKey: error setting key: \" + key +\" : \" + error.message);\n        }\n    });\n}\n\nconst redis = global.get('redis'); // Assumes Redis client is globally available\n\nconst row = msg.sourceMsg.payload.row;\nconst key = \"vcache_node:\" + row.node + \":\" + row.uuid;\n\nsetDelKey(\"delete:\" + key, true, 15); // set hold off timer before accepting this node again\n\nredis.del(key, function (err, reply) {\n    if (err) {\n        node.error(\"Error deleting key(\" + reply + \"): \", err );\n    } else {\n        row.delete = true;\n        msg.payload = row\n        node.send(msg);\n        node.warn(\"node delete: node deleted from redis: \" + key)\n    }\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 720,
        "wires": [
            [
                "c347b6521867b6fb"
            ]
        ]
    },
    {
        "id": "11e6118b3d66d8ed",
        "type": "change",
        "z": "953eb73365d84859",
        "name": "Save sort",
        "rules": [
            {
                "t": "set",
                "p": "nodeSort",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "e054d7063c78836e",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "init 0s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "bb8e27c46b8ff662",
                "62f9394874b16107"
            ]
        ]
    },
    {
        "id": "bb8e27c46b8ff662",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "global functions",
        "func": "const util = (function () {\n    'use strict';\n\n    function add(a, b) {\n        return a + b;\n    }\n\n    return {\n        add: add\n    };\n\n}());\n\nglobal.set('util', util);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "11dd7f1faf822026",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "row details",
        "func": "const row = msg.payload.row;\nglobal.set(\"nodeSelected\", row, \"file\");\nmsg.payload = \"Node Details\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 660,
        "wires": [
            [
                "04aa2ba4afb084b6"
            ]
        ]
    },
    {
        "id": "04aa2ba4afb084b6",
        "type": "ui_ui_control",
        "z": "953eb73365d84859",
        "name": "",
        "events": "all",
        "x": 1200,
        "y": 720,
        "wires": [
            [
                "67ba704c78cb72a4"
            ]
        ]
    },
    {
        "id": "67ba704c78cb72a4",
        "type": "link out",
        "z": "953eb73365d84859",
        "name": "node detail trigger",
        "mode": "link",
        "links": [
            "f80372ff84e69aab"
        ],
        "x": 1205,
        "y": 660,
        "wires": []
    },
    {
        "id": "4f03c1bab552cc28",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "poll 1h",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "e0c1f41c65d260dd"
            ]
        ]
    },
    {
        "id": "e0c1f41c65d260dd",
        "type": "exec",
        "z": "953eb73365d84859",
        "command": "/usr/sbin/logrotate /etc/logrotate.conf",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "logrotate",
        "x": 280,
        "y": 220,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "3cc18776c5dc0ebe",
        "type": "ui_template",
        "z": "953eb73365d84859",
        "group": "66d92f18708659f1",
        "name": "",
        "order": 3,
        "width": 3,
        "height": 1,
        "format": "<style>\n.tabulator-row .tabulator-cell .tabulator-traffic-light {\ndisplay: inline-block;\nheight: 14px;\nwidth: 22px;\nborder-radius: 14px;\n}\n.tabulator-row {\npadding-top: 4px;\n}\n.tabulator-row .tabulator-cell.progresslegend > div:nth-child(2)[style] {\ntop: 7px !important;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 280,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "d6147e86664e5e9b",
        "type": "exec",
        "z": "953eb73365d84859",
        "command": "sleep 5; salt '*' saltutil.sync_beacons",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "sync beacons",
        "x": 760,
        "y": 360,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "20322f0058561fd5",
        "type": "daemon",
        "z": "953eb73365d84859",
        "name": "",
        "command": "salt-master",
        "args": "",
        "autorun": false,
        "cr": false,
        "redo": true,
        "op": "string",
        "closer": "SIGTERM",
        "x": 770,
        "y": 280,
        "wires": [
            [
                "fa49c3ce35cbcdb2"
            ],
            [
                "fa49c3ce35cbcdb2"
            ],
            [
                "fa49c3ce35cbcdb2"
            ]
        ]
    },
    {
        "id": "941674b482aa389f",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "restart salt master",
        "func": "msg.kill =  true;\nmsg.start = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "20322f0058561fd5"
            ]
        ]
    },
    {
        "id": "27206406fc11d2ef",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "init 0.5s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 320,
        "wires": [
            [
                "d8c7f242128e6d08",
                "fd6fa0f7672dae01"
            ]
        ]
    },
    {
        "id": "d8c7f242128e6d08",
        "type": "ui_button",
        "z": "953eb73365d84859",
        "name": "restart salt master",
        "group": "2bfbf363d31643c1",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "Restart Salt",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 310,
        "y": 280,
        "wires": [
            [
                "941674b482aa389f"
            ]
        ]
    },
    {
        "id": "fd6fa0f7672dae01",
        "type": "ui_button",
        "z": "953eb73365d84859",
        "name": "sync beacons",
        "group": "2bfbf363d31643c1",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "Sync Beacons",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 300,
        "y": 360,
        "wires": [
            [
                "d6147e86664e5e9b"
            ]
        ]
    },
    {
        "id": "3e0cb6f98233ae1e",
        "type": "complete",
        "z": "953eb73365d84859",
        "name": "sync beacons",
        "scope": [
            "1e980162154930d3",
            "430201fe36756d7b"
        ],
        "uncaught": false,
        "x": 90,
        "y": 400,
        "wires": [
            [
                "fd6fa0f7672dae01"
            ]
        ]
    },
    {
        "id": "fd5a873088e11741",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "stop",
        "props": [
            {
                "p": "stop",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 240,
        "wires": [
            [
                "20322f0058561fd5"
            ]
        ]
    },
    {
        "id": "38fb5e3cb942d8c7",
        "type": "inject",
        "z": "953eb73365d84859",
        "name": "start",
        "props": [
            {
                "p": "start",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 510,
        "y": 320,
        "wires": [
            [
                "20322f0058561fd5"
            ]
        ]
    },
    {
        "id": "62f9394874b16107",
        "type": "OS",
        "z": "953eb73365d84859",
        "name": "",
        "x": 270,
        "y": 80,
        "wires": [
            [
                "b6e56177be3ad159"
            ]
        ]
    },
    {
        "id": "b6e56177be3ad159",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "MGR_HOSTNAME",
        "func": "global.set(\"MGR_HOSTNAME\", msg.payload.hostname);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "388fa95e75dc405b",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "row configure",
        "func": "const row_id = msg.payload;\nglobal.set(\"cfg_select_flt\", row_id, \"file\");\nmsg.payload = \"Configure\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 840,
        "wires": [
            [
                "04aa2ba4afb084b6"
            ]
        ]
    },
    {
        "id": "fa49c3ce35cbcdb2",
        "type": "debug",
        "z": "953eb73365d84859",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 280,
        "wires": []
    },
    {
        "id": "ab8b7a155a8d2732",
        "type": "debug",
        "z": "953eb73365d84859",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 200,
        "wires": []
    },
    {
        "id": "9d6db01a0a361b12",
        "type": "file",
        "z": "953eb73365d84859",
        "name": "vcache-mgr.version",
        "filename": "/var/run/vcache-mgr.version",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 770,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "fc81090b71c2f79e",
        "type": "function",
        "z": "953eb73365d84859",
        "name": "gen version",
        "func": "msg.payload = env.get(\"VCACHE_MGR_VERSION\") || '0.0.0';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 200,
        "wires": [
            [
                "05bef2ebd6355241",
                "9d6db01a0a361b12"
            ]
        ]
    },
    {
        "id": "50f9790b.49c718",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "varnish uptime",
        "func": "msg.payload = msg.payload.uptime\nmsg.topic = \"uptime\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            [
                "4f6abcf.71f1a44"
            ]
        ]
    },
    {
        "id": "4f6abcf.71f1a44",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "d898c7987d10b482",
        "order": 8,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "UpTime: ",
        "format": "<font size=3>{{msg.payload}}</font>",
        "layout": "row-left",
        "className": "def",
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "c0a13984a398e6d7",
        "type": "ui_chart",
        "z": "974b87f71963749f",
        "name": "CPU Historic",
        "group": "d898c7987d10b482",
        "order": 15,
        "width": 7,
        "height": 4,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 630,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "18c68b74898c536f",
        "type": "ui_gauge",
        "z": "974b87f71963749f",
        "name": "",
        "group": "d898c7987d10b482",
        "order": 4,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "RAM",
        "label": "",
        "format": "{{msg.payload| number:1}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "90",
        "diff": false,
        "className": "def",
        "x": 610,
        "y": 460,
        "wires": []
    },
    {
        "id": "fbc058e4a2725b9d",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "d898c7987d10b482",
        "order": 2,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "vCache Version: ",
        "format": "<font size=3>{{msg.payload}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 640,
        "y": 140,
        "wires": []
    },
    {
        "id": "f4aa44582aec2ee6",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "d898c7987d10b482",
        "order": 14,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "Memory:  ",
        "format": "<font size=3>{{msg.value}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 620,
        "y": 420,
        "wires": []
    },
    {
        "id": "b47ed9d6965cf619",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "mem total",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\nmsg.value = formatBytes(msg.payload.mem_total);\nmsg.payload = msg.payload.mem_total;\nmsg.topic = \"mem_total\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 420,
        "wires": [
            [
                "f4aa44582aec2ee6"
            ]
        ]
    },
    {
        "id": "f29cd079ba2bd3e7",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "disk use %",
        "func": "msg.payload = msg.payload.disk_use_pct;\nmsg.topic = \"disk_use_pct\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 600,
        "wires": [
            [
                "b833a78279a06e8c"
            ]
        ]
    },
    {
        "id": "b833a78279a06e8c",
        "type": "ui_gauge",
        "z": "974b87f71963749f",
        "name": "",
        "group": "d898c7987d10b482",
        "order": 16,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "HD",
        "label": "",
        "format": "{{value | number:1}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "90",
        "diff": false,
        "className": "def",
        "x": 610,
        "y": 600,
        "wires": []
    },
    {
        "id": "abbb31eb4b46bee5",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "mem used",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.value = formatBytes(msg.payload.mem_use);\nmsg.payload = msg.payload.mem_use;\nmsg.topic = \"mem_use\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "3fe4b364fdaec2bb"
            ]
        ]
    },
    {
        "id": "3fe4b364fdaec2bb",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "d898c7987d10b482",
        "order": 12,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Used: ",
        "format": "{{msg.value}}",
        "layout": "row-center",
        "className": "def",
        "x": 610,
        "y": 500,
        "wires": []
    },
    {
        "id": "2bd8b9bfd2a1d534",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "d898c7987d10b482",
        "order": 11,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Load: ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 360,
        "wires": []
    },
    {
        "id": "39b8930ee2a9adf4",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "load avgs",
        "func": "msg.payload = msg.payload.cpu_load_avg;\nmsg.topic = \"cpu_load_avg\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "2bd8b9bfd2a1d534"
            ]
        ]
    },
    {
        "id": "53516185218f0489",
        "type": "ui_gauge",
        "z": "974b87f71963749f",
        "name": "CPU use",
        "group": "d898c7987d10b482",
        "order": 3,
        "width": 7,
        "height": 3,
        "gtype": "gage",
        "title": "CPU",
        "label": "",
        "format": "{{value | number:1}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "90",
        "diff": false,
        "className": "def",
        "x": 620,
        "y": 280,
        "wires": []
    },
    {
        "id": "1faa30a4e47251a1",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "cpu model",
        "func": "msg.payload = msg.payload.cpu_model + \" (\" + msg.payload.cpu_cores + \"C)\";\nmsg.topic = \"cpu_model\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            [
                "51ccb23cb43f7af2"
            ]
        ]
    },
    {
        "id": "51ccb23cb43f7af2",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "d898c7987d10b482",
        "order": 10,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "CPU: ",
        "format": "<font size=3>{{msg.payload}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 200,
        "wires": []
    },
    {
        "id": "d6fd568602fabf48",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "d898c7987d10b482",
        "order": 18,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "Disk: ",
        "format": "<font size=3>{{msg.value}}</font>",
        "layout": "row-left",
        "className": "def",
        "x": 610,
        "y": 560,
        "wires": []
    },
    {
        "id": "11b451e51ccf5739",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "d898c7987d10b482",
        "order": 24,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Used: ",
        "format": "{{msg.value}}",
        "layout": "row-center",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 640,
        "wires": []
    },
    {
        "id": "cc0bb701d1ad35db",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "disk used",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.value = formatBytes(msg.payload.disk_use);\nmsg.payload = msg.payload.disk_use;\nmsg.topic = \"disk_use\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 640,
        "wires": [
            [
                "11b451e51ccf5739"
            ]
        ]
    },
    {
        "id": "2c4efc4e2ad833bb",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "disk size",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\nmsg.value = formatBytes(msg.payload.disk_total)\nmsg.payload = msg.payload.disk_total\nmsg.topic = \"disk_total\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 560,
        "wires": [
            [
                "d6fd568602fabf48"
            ]
        ]
    },
    {
        "id": "cc60b6c3e5fb14d9",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "d898c7987d10b482",
        "order": 6,
        "width": 8,
        "height": 1,
        "name": "",
        "label": "Host: ",
        "format": "<font size=3>{{msg.payload}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 610,
        "y": 60,
        "wires": []
    },
    {
        "id": "d23168e787472af1",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "hostname",
        "func": "msg.payload = msg.payload.hostname;\nmsg.topic = \"hostname\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 60,
        "wires": [
            [
                "cc60b6c3e5fb14d9"
            ]
        ]
    },
    {
        "id": "da0aa089ba25ac3d",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "mem use %",
        "func": "msg.payload = msg.payload.mem_use_pct;\nmsg.topic = \"mem_use_pct\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 460,
        "wires": [
            [
                "18c68b74898c536f"
            ]
        ]
    },
    {
        "id": "e1e13788026a662b",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "vcache version",
        "func": "msg.payload = msg.payload.version\nmsg.topic =\"version\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "fbc058e4a2725b9d"
            ]
        ]
    },
    {
        "id": "f706757e6c338f82",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "cpu use %",
        "func": "msg.payload = msg.payload.cpu_use_pct;\nmsg.topic = \"cpu_use_pct\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 300,
        "wires": [
            [
                "53516185218f0489",
                "c0a13984a398e6d7"
            ]
        ]
    },
    {
        "id": "913fe8919ba03de2",
        "type": "ui_chart",
        "z": "974b87f71963749f",
        "name": "Upstream Requests Rate",
        "group": "3a38c87d0066b087",
        "order": 56,
        "width": 10,
        "height": 4,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 670,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "1572697106f6a1f2",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "3a38c87d0066b087",
        "order": 51,
        "width": 10,
        "height": 1,
        "name": "Upstream Request Rate",
        "label": "Upstream Request Rate: ",
        "format": "{{msg.rate|number:2}} {{msg.units}}rps",
        "layout": "row-center",
        "className": "def",
        "x": 670,
        "y": 1460,
        "wires": []
    },
    {
        "id": "b782bf2ea349a4a5",
        "type": "ui_chart",
        "z": "974b87f71963749f",
        "name": "Upstream Bandwidth",
        "group": "3a38c87d0066b087",
        "order": 54,
        "width": 10,
        "height": 4,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 660,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "1486b40a42209109",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "3a38c87d0066b087",
        "order": 49,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "Upstream Bandwidth: ",
        "format": "{{msg.rate}} {{msg.units}}bps",
        "layout": "row-center",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 660,
        "y": 1380,
        "wires": []
    },
    {
        "id": "a4f1c41a459e65ab",
        "type": "ui_chart",
        "z": "974b87f71963749f",
        "name": "Client Request Rate",
        "group": "3a38c87d0066b087",
        "order": 37,
        "width": 10,
        "height": 4,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 660,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "8c62fec7f80f063e",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "3a38c87d0066b087",
        "order": 32,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "Delivered Request Rate: ",
        "format": "{{msg.rate | number:2}} {{msg.units}}rps",
        "layout": "row-center",
        "className": "def",
        "x": 670,
        "y": 1280,
        "wires": []
    },
    {
        "id": "68d7914dad783e4e",
        "type": "ui_chart",
        "z": "974b87f71963749f",
        "name": "Client Request Efficiency",
        "group": "3a38c87d0066b087",
        "order": 18,
        "width": 10,
        "height": 4,
        "label": "Cache Efficiency <font size=3>[requests]</font>",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 670,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "bc9d6c02c0ee9e5b",
        "type": "ui_gauge",
        "z": "974b87f71963749f",
        "name": "Client Request Efficiency",
        "group": "3a38c87d0066b087",
        "order": 4,
        "width": 10,
        "height": 4,
        "gtype": "gage",
        "title": "",
        "label": "HIT %",
        "format": "{{value|number:1}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#00b500",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "def",
        "x": 670,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3f16dfa000e09c98",
        "type": "ui_gauge",
        "z": "974b87f71963749f",
        "name": "Cache Efficiency",
        "group": "3a38c87d0066b087",
        "order": 2,
        "width": 10,
        "height": 4,
        "gtype": "gage",
        "title": "",
        "label": "HIT %",
        "format": "{{value|number:1}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#00b500",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "def",
        "x": 650,
        "y": 1140,
        "wires": []
    },
    {
        "id": "57b723ae0cdb1fd5",
        "type": "ui_chart",
        "z": "974b87f71963749f",
        "name": "Cache Efficiency",
        "group": "3a38c87d0066b087",
        "order": 16,
        "width": 10,
        "height": 4,
        "label": "Cache Efficiency  <font size=3>[data]</font>",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 650,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "0413d291a951c109",
        "type": "ui_chart",
        "z": "974b87f71963749f",
        "name": "Client Bandwidth",
        "group": "3a38c87d0066b087",
        "order": 35,
        "width": 10,
        "height": 4,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 650,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "7a3e3814da166b53",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "3a38c87d0066b087",
        "order": 30,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "Delivered Bandwidth: ",
        "format": "{{msg.rate}} {{msg.units}}bps",
        "layout": "row-center",
        "className": "def",
        "x": 660,
        "y": 1000,
        "wires": []
    },
    {
        "id": "5b7429b7e2f7db72",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "3733aad54f7e21ab",
        "order": 12,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "Bandwidth Saved [max]",
        "format": "{{msg.payload}} {{msg.units}}bps",
        "layout": "col-center",
        "className": "huge",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 670,
        "y": 700,
        "wires": []
    },
    {
        "id": "8db13e162d627307",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "3733aad54f7e21ab",
        "order": 17,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "Data Saved [total]",
        "format": "{{msg.value}}",
        "layout": "col-center",
        "className": "huge",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 650,
        "y": 820,
        "wires": []
    },
    {
        "id": "a709f09e2be9e276",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "3733aad54f7e21ab",
        "order": 5,
        "width": 7,
        "height": 2,
        "name": "",
        "label": "User Sessions [max]",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "huge",
        "x": 660,
        "y": 860,
        "wires": []
    },
    {
        "id": "232348cff06e823f",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "3733aad54f7e21ab",
        "order": 4,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Bandwidth Saving: ",
        "format": "{{msg.rate}} {{msg.units}}bps",
        "layout": "row-center",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 650,
        "y": 780,
        "wires": []
    },
    {
        "id": "128bc4259bf38155",
        "type": "ui_text",
        "z": "974b87f71963749f",
        "group": "3733aad54f7e21ab",
        "order": 2,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "User Sessions: ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "def",
        "x": 640,
        "y": 940,
        "wires": []
    },
    {
        "id": "65c9eebbe3b613f2",
        "type": "ui_chart",
        "z": "974b87f71963749f",
        "name": "User Sessions Chart",
        "group": "3733aad54f7e21ab",
        "order": 7,
        "width": 7,
        "height": 5,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "def",
        "x": 660,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "73c5ea80b8305d9a",
        "type": "ui_chart",
        "z": "974b87f71963749f",
        "name": "Bandwidth Saved Chart",
        "group": "3733aad54f7e21ab",
        "order": 9,
        "width": 7,
        "height": 5,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "def",
        "x": 670,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "8fc202c6a30c598f",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "nodes detail",
        "func": "const redis = global.get('redis'); // Assumes Redis client is globally available\nconst now = Date.now();\n/**\n* 3 - CRIT, 2 - WARN, 1 - OK, 0 - UNKNOWN\n* @param {string | number | Date} stamp\n* @param {number} now\n* @param {number} cpu\n* @param {number} mem\n* @param {number} disk\n*/\nfunction calc_status(now, stamp, cpu, mem, disk) {\n    const stamp_ms = new Date(stamp).getTime();\n    const diff = (now - stamp_ms) / 1000;\n    if (diff > 30) return 0;\n    if (cpu > 90 || mem > 90 || disk > 90) return 3;\n    if (cpu > 80 || mem > 80 || disk > 80) return 2;\n    return 1;\n}\n\nfunction convertNumericStrings(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            const value = obj[key];\n            if (!isNaN(value)) {\n                // Check if the value is a valid number (integer or float)\n                if (Number.isInteger(parseFloat(value))) {\n                    // If it's an integer, parse and assign as an integer\n                    obj[key] = parseInt(value, 10);\n                } else {\n                    // If it's a float, parse and assign as a float\n                    obj[key] = parseFloat(value);\n                }\n            }\n        }\n    }\n    return obj;\n}\n\n// Function to retrieve hash objects for each key\nfunction get_node_data(key, callback) {\n    redis.hgetall(key, function (err, hash) {\n        if (err) {\n            callback(err);\n            return;\n        }\n        hash = convertNumericStrings(hash);\n        hash.status = calc_status(now, hash._stamp, hash.cpu_use_pct, hash.mem_use_pct, hash.disk_use_pct);\n        if (hash.status == 0) {\n            hash.cache_eff = -1;\n            hash.cpu_use_pct = -1;\n            hash.mem_use_pct = -1;\n            hash.disk_use_pct = -1;\n            hash.client_bw = NaN;\n            hash.upstream_bw = NaN;\n            hash.users = NaN;\n        } else {\n            //hash.cache_eff = parseInt(hash.cache_eff_pct);\n            //hash.cpu_use_pct = parseFloat(hash.cpu_use_pct);\n            //hash.mem_use_pct = parseFloat(hash.mem_use_pct);\n           // hash.disk_use_pct = parseFloat(hash.disk_use_pct);\n            //hash.client_bw = parseInt(hash.client_bw);\n            //hash.upstream_bw = parseInt(hash.upstream_bw);\n            //hash.users = parseInt(hash.client_sess);\n        }\n        callback(null,hash); \n    });\n}\n\n// Main function\nconst cache_node = global.get(\"nodeSelected\", \"file\");\nif (cache_node) {\n    const key = \"vcache_node:\" + cache_node.hostname + \":\" + cache_node.uuid;\n    get_node_data(key, function (err, hash) {\n        if (err) {\n            node.error(err);\n            return;\n        }\n        msg.payload = hash;\n        node.send(msg);\n    });\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 880,
        "wires": [
            [
                "d23168e787472af1",
                "50f9790b.49c718",
                "e1e13788026a662b",
                "1faa30a4e47251a1",
                "f706757e6c338f82",
                "39b8930ee2a9adf4",
                "b47ed9d6965cf619",
                "da0aa089ba25ac3d",
                "abbb31eb4b46bee5",
                "2c4efc4e2ad833bb",
                "f29cd079ba2bd3e7",
                "cc0bb701d1ad35db",
                "a3ab7ed489cffd41",
                "2d42e4feaff4ca9d",
                "cc4530d81b831184",
                "17e3fe335519aed0",
                "87efa9f6b6c9b035",
                "96bc52077c2d45ed",
                "3403fba2e6675e96",
                "3b8de55b110ae2ff",
                "e45a659d61818887",
                "bf3b8f2cf8a535ec",
                "76e79eaf8f850cee"
            ]
        ]
    },
    {
        "id": "24c8dd37e4184c9e",
        "type": "inject",
        "z": "974b87f71963749f",
        "name": "poll 5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 60,
        "wires": [
            [
                "8fc202c6a30c598f"
            ]
        ]
    },
    {
        "id": "a3ab7ed489cffd41",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "max bw saved",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nfunction formatMetric(value, decimals) {\n    if (value <= 1.0) return [value, ''];\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n    var i = Math.floor(Math.log(value) / Math.log(k));\n    return [parseFloat((value / Math.pow(k, i)).toFixed(dm)), sizes[i]];\n}\nmsg.payload = msg.payload.max_bw_saved;\n[msg.payload, msg.units] = formatMetric(msg.payload)\nmsg.value = formatBytes(msg.payload.max_bw_saved);\nmsg.topic = \"max_bw_saved\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 700,
        "wires": [
            [
                "5b7429b7e2f7db72"
            ]
        ]
    },
    {
        "id": "2d42e4feaff4ca9d",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "bw saved",
        "func": "function formatMetric(value, decimals) {\n    if (value <= 1.0) return [value, ''];\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n    var i = Math.floor(Math.log(value) / Math.log(k));\n    return [parseFloat((value / Math.pow(k, i)).toFixed(dm)), sizes[i]];\n}\n\nmsg.payload = msg.payload.bw_saved;\n[msg.rate, msg.units] = formatMetric(msg.payload);\nmsg.topic = \"bw_saved\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 760,
        "wires": [
            [
                "73c5ea80b8305d9a",
                "232348cff06e823f"
            ]
        ]
    },
    {
        "id": "cc4530d81b831184",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "data saved ",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.value = formatBytes(msg.payload.data_saved);\nmsg.payload = msg.payload.data_saved;\nmsg.topic = \"data_saved\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 820,
        "wires": [
            [
                "8db13e162d627307"
            ]
        ]
    },
    {
        "id": "17e3fe335519aed0",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "client sess max",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.value = formatBytes(msg.payload.client_sess_max);\nmsg.payload = msg.payload.client_sess_max;\nmsg.topic = \"client_sess_max\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 860,
        "wires": [
            [
                "a709f09e2be9e276"
            ]
        ]
    },
    {
        "id": "87efa9f6b6c9b035",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "cliet sessions",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.value = formatBytes(msg.payload.client_sess);\nmsg.payload = msg.payload.client_sess;\nmsg.topic = \"client_sess\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 920,
        "wires": [
            [
                "65c9eebbe3b613f2",
                "128bc4259bf38155"
            ]
        ]
    },
    {
        "id": "96bc52077c2d45ed",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "client bw",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nfunction formatMetric(value, decimals) {\n    if (value <= 1.0) return [value, ''];\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n    var i = Math.floor(Math.log(value) / Math.log(k));\n    return [parseFloat((value / Math.pow(k, i)).toFixed(dm)), sizes[i]];\n}\nif (msg.rate < 0) {\n    node.warn(\"rate = \" + msg.rate);\n    msg.rate = 0;\n}\nmsg.payload = msg.payload.client_bw;\n\n[msg.rate, msg.units] = formatMetric(msg.payload);\n\nmsg.value = formatBytes(msg.payload);\nmsg.topic = \"client_bw\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1020,
        "wires": [
            [
                "7a3e3814da166b53",
                "0413d291a951c109"
            ]
        ]
    },
    {
        "id": "3403fba2e6675e96",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "cache eff pct",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.value = formatBytes(msg.payload.cache_eff_pct);\nmsg.payload = msg.payload.cache_eff_pct;\nmsg.topic = \"cache_eff_pct\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1120,
        "wires": [
            [
                "57b723ae0cdb1fd5",
                "3f16dfa000e09c98"
            ]
        ]
    },
    {
        "id": "3b8de55b110ae2ff",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "request eff pct",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.value = formatBytes(msg.payload.req_eff_pct);\nmsg.payload = msg.payload.req_eff_pct;\nmsg.topic = \"req_eff_pct\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1200,
        "wires": [
            [
                "bc9d6c02c0ee9e5b",
                "68d7914dad783e4e"
            ]
        ]
    },
    {
        "id": "e45a659d61818887",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "delivered request rate",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nfunction formatMetric(value, decimals) {\n    if (value <= 1.0) return [value, ''];\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n    var i = Math.floor(Math.log(value) / Math.log(k));\n    return [parseFloat((value / Math.pow(k, i)).toFixed(dm)), sizes[i]];\n}\nif (msg.rate < 0) {\n    node.warn(\"rate = \" + msg.rate);\n    msg.rate = 0;\n}\nmsg.payload = msg.payload.req_rate;\n\n[msg.rate, msg.units] = formatMetric(msg.payload)\n\nmsg.value = formatBytes(msg.payload);\nmsg.topic = \"req_rate\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1300,
        "wires": [
            [
                "8c62fec7f80f063e",
                "a4f1c41a459e65ab"
            ]
        ]
    },
    {
        "id": "bf3b8f2cf8a535ec",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "upstream bw",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nfunction formatMetric(value, decimals) {\n    if (value <= 1.0) return [value, ''];\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n    var i = Math.floor(Math.log(value) / Math.log(k));\n    return [parseFloat((value / Math.pow(k, i)).toFixed(dm)), sizes[i]];\n}\nif (msg.rate < 0) msg.rate = 0;\nmsg.payload = msg.payload.upstream_bw;\n\n[msg.rate, msg.units] = formatMetric(msg.payload)\n\nmsg.value = formatBytes(msg.payload);\nmsg.topic = \"upstream_bw\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1400,
        "wires": [
            [
                "1486b40a42209109",
                "b782bf2ea349a4a5"
            ]
        ]
    },
    {
        "id": "76e79eaf8f850cee",
        "type": "function",
        "z": "974b87f71963749f",
        "name": "upstream req rate",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\nfunction formatMetric(value, decimals) {\n    if (value <= 1.0) return [value, ''];\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n    var i = Math.floor(Math.log(value) / Math.log(k));\n    return [parseFloat((value / Math.pow(k, i)).toFixed(dm)), sizes[i]];\n}\nif (msg.rate < 0) {\n    node.error(\"rate = \" + msg.rate);\n    msg.rate = 0;\n}\nmsg.payload = msg.payload.upstream_req_rate;\n[msg.rate, msg.units] = formatMetric(msg.payload)\n\nmsg.value = formatBytes(msg.payload);\nmsg.topic = \"upstream_req_rate\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1480,
        "wires": [
            [
                "1572697106f6a1f2",
                "913fe8919ba03de2"
            ]
        ]
    },
    {
        "id": "f80372ff84e69aab",
        "type": "link in",
        "z": "974b87f71963749f",
        "name": "node detail set",
        "links": [
            "67ba704c78cb72a4"
        ],
        "x": 105,
        "y": 820,
        "wires": [
            [
                "8fc202c6a30c598f"
            ]
        ]
    },
    {
        "id": "6f6232b4ef2ad0db",
        "type": "ui_template",
        "z": "974b87f71963749f",
        "group": "d898c7987d10b482",
        "name": "",
        "order": 22,
        "width": 8,
        "height": 1,
        "format": "<style>\n    .def p.value {\n        color: #4a8ad9;\n    }\n    .big p.value {\n        vertical-align: bottom;\n        font-size: 150%;\n        color: #4a8ad9;\n    }\n    .big p.label {\n        vertical-align: top;\n        font-weight: bold;\n    }\n    .huge p.value {\n        vertical-align: bottom;\n        font-size: 200%;\n        color: #4a8ad9;\n    }\n    .huge p.label {\n        vertical-align: top;\n        font-weight: bold;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 140,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "48b274f862eab375",
        "type": "downloadfile",
        "z": "26063e3cce767688",
        "name": "",
        "filename": "",
        "encoding": "binary",
        "x": 810,
        "y": 180,
        "wires": []
    },
    {
        "id": "e0da1abfc78695f9",
        "type": "ui_button",
        "z": "26063e3cce767688",
        "name": "",
        "group": "d898c7987d10b482",
        "order": 20,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Download Logs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "af15c7a7eb291c9d"
            ]
        ]
    },
    {
        "id": "140521ec2b66f7cd",
        "type": "exec",
        "z": "26063e3cce767688",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "15",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 570,
        "y": 100,
        "wires": [
            [],
            [],
            [
                "263db5ed3496c07b"
            ]
        ]
    },
    {
        "id": "af15c7a7eb291c9d",
        "type": "function",
        "z": "26063e3cce767688",
        "name": "salt get_logs",
        "func": "var n = global.get(\"nodeSelected\").node;\nvar d = new Date().toISOString().replace(/\\D/g, '').slice(0, 14);;\nvar b = n + \"-logs-\" + d;\nmsg.payload = \"salt \" + n + ' state.apply vcache.util.get_logs pillar=\\'{\"basename\": \"' + b + '\"}\\' -l debug';\nmsg.filename = \"/var/cache/salt/master/minions/\" + n + \"/files/tmp/\" + b + \".zip\";\nmsg.basename = b + \".zip\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "140521ec2b66f7cd"
            ]
        ]
    },
    {
        "id": "263db5ed3496c07b",
        "type": "switch",
        "z": "26063e3cce767688",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 100,
        "wires": [
            [
                "ba8a8e153faf9df6"
            ],
            []
        ]
    },
    {
        "id": "ba8a8e153faf9df6",
        "type": "file in",
        "z": "26063e3cce767688",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "binary",
        "allProps": false,
        "x": 440,
        "y": 180,
        "wires": [
            [
                "6d9b8e6220cbc62d"
            ]
        ]
    },
    {
        "id": "6d9b8e6220cbc62d",
        "type": "function",
        "z": "26063e3cce767688",
        "name": "basename",
        "func": "msg.filename =  msg.basename;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 180,
        "wires": [
            [
                "48b274f862eab375"
            ]
        ]
    },
    {
        "id": "b1d1fd628d350803",
        "type": "ui_text_input",
        "z": "11df8122a3459712",
        "name": "cert pw",
        "label": "certificate password",
        "tooltip": "pkcs12 password (blank if none)",
        "group": "2871cce383627674",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "password",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 240,
        "y": 400,
        "wires": [
            [
                "cbb5141d17c16d5c"
            ]
        ]
    },
    {
        "id": "6349b7a97ec7d3e7",
        "type": "ui_text_input",
        "z": "11df8122a3459712",
        "name": "cert tag",
        "label": "certificate tag",
        "tooltip": "certificate tag name identifying the destination",
        "group": "2871cce383627674",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 240,
        "y": 360,
        "wires": [
            [
                "a1954ee40501addf"
            ]
        ]
    },
    {
        "id": "cbb5141d17c16d5c",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "set cert pw cfg",
        "func": "global.set('CERT_PW_CFG', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "a1954ee40501addf",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "set cert tag cfg",
        "func": "global.set('CERT_TAG_CFG', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "6fb4aaa55aefc3b8",
        "type": "ui_button",
        "z": "11df8122a3459712",
        "name": "publish cert",
        "group": "2871cce383627674",
        "order": 9,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Publish Certificate",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 440,
        "wires": [
            [
                "b6084da73970284e"
            ]
        ]
    },
    {
        "id": "54cbb1e2bf06957a",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "set cert file cfg",
        "func": "\nglobal.set('CERT_FILE_CFG', msg.filename);\nglobal.set('CERT_FILE_DATA_CFG', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "b6084da73970284e",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "publish cert",
        "func": "const os = require('os');\nvar mgr_host = os.hostname();\n\nconst cert_file = global.get(\"CERT_FILE_CFG\");\nconst cert_tag = global.get(\"CERT_TAG_CFG\");\nconst cert_pw = global.get(\"CERT_PW_CFG\");\nvar selection = global.get(\"nodeSelected\");\nif (selection == '*') {\n    selection = selection.replace(/\\*/g, '\\\\*');\n}\nif (cert_file && cert_tag) {\n    const cert_file_data = global.get(\"CERT_FILE_DATA_CFG\");\n    node.warn(\"cert len: \" + cert_file_data.length);\n    msg.payload = cert_file_data;\n    msg.filepath = \"/srv/salt/state/pki/\" + cert_file;\n    if (selection == mgr_host) {\n        node.warning(\"set our own cert\");\n    } else {\n        if (cert_pw && cert_pw.length) {\n            msg.command = \"salt \" + selection + \" state.sls vcache.util.push_cert pillar='{\\\"cert_tag\\\": \" + cert_tag + \", \\\"cert_pw\\\": \" + cert_pw + \", \\\"cert_file\\\": \" + cert_file + \"}'\";\n        } else {\n            msg.command = \"salt \" + selection + \" state.sls vcache.util.push_cert pillar='{\\\"cert_tag\\\": \" + cert_tag + \", \\\"cert_file\\\": \" + cert_file + \"}'\";\n        }\n    }\n} else {\n    msg.pathname = \"/dev/null\";\n    msg.command = \"false\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 440,
        "wires": [
            [
                "10b748e69b2169e6"
            ]
        ]
    },
    {
        "id": "503c09fd27f1752c",
        "type": "exec",
        "z": "11df8122a3459712",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "salt state run",
        "x": 950,
        "y": 500,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "49d3e4fd0b19f902",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "set cfg file cfg",
        "func": "\n\nglobal.set('CFG_FILE_CFG', msg.filename);\nglobal.set('CFG_FILE_DATA_CFG', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "e37fec026d371357",
        "type": "ui_button",
        "z": "11df8122a3459712",
        "name": "publish cfg",
        "group": "3a88c0294b97b966",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Publish Config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 580,
        "wires": [
            [
                "147e6bfc2bfa57f1"
            ]
        ]
    },
    {
        "id": "147e6bfc2bfa57f1",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "publish cfg",
        "func": "const cfg_file = global.get(\"CFG_FILE_CFG\");\n\nif (cfg_file) {\n    const cfg_file_data = global.get(\"CFG_FILE_DATA_CFG\");\n    msg.payload = cfg_file_data;\n    msg.pathname = \"/srv/salt/state/tmp/\" + cfg_file;\n    msg.command = \"salt \\\\* state.sls vcache.util.push_cfg pillar='{\\\"cfg_file\\\": \" + cfg_file + \"}'\";\n} else {\n    msg.command = \"false\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 580,
        "wires": [
            [
                "cf73e19013dcacb6"
            ]
        ]
    },
    {
        "id": "3499a2cb4691f7b2",
        "type": "ui_button",
        "z": "11df8122a3459712",
        "name": "download cfg",
        "group": "3a88c0294b97b966",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Download Config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 620,
        "wires": [
            [
                "bf39125bdea15489"
            ]
        ]
    },
    {
        "id": "bf39125bdea15489",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "download cfg",
        "func": "msg.filename = \"vcache.cfg\";\nmsg.payload = \"/etc/vcache-mgr/vcache.cfg\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 620,
        "wires": [
            [
                "51ea5884e4306929"
            ]
        ]
    },
    {
        "id": "51ea5884e4306929",
        "type": "file in",
        "z": "11df8122a3459712",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 680,
        "y": 620,
        "wires": [
            [
                "c989a0e565938742"
            ]
        ]
    },
    {
        "id": "c989a0e565938742",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "function 1",
        "func": "msg.filename  = \"vcache.cfg\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 620,
        "wires": [
            [
                "975b39d4159692ed"
            ]
        ]
    },
    {
        "id": "8ac0c472f8bcec92",
        "type": "ui_template",
        "z": "11df8122a3459712",
        "group": "3a88c0294b97b966",
        "name": "Upload Cfg",
        "order": 5,
        "width": 4,
        "height": 1,
        "format": "\n<body>\n<button class=\"md-raised md-button md-ink-ripple\" onclick=\"importCfgData()\">Choose File</button>    \n\n<script>\nlet cfgScope = scope;\n\nfunction importCfgData() {\n  let input = document.createElement('input');\n  input.type = 'file';\n  input.id = 'cfgUpload';\n  input.onchange = _ => {\n    let fReader = new FileReader();\n    fReader.readAsText(input.files[0]);\n    fReader.onloadend = function(event){\n    cfgScope.send({payload:event.target.result, filename: input.files[0].name});}\n  };\n  input.click();\n}\n</script>\n</body>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 540,
        "wires": [
            [
                "49d3e4fd0b19f902",
                "5b295b8c294bc76d"
            ]
        ]
    },
    {
        "id": "9a49fd2c6912217d",
        "type": "ui_template",
        "z": "11df8122a3459712",
        "group": "2871cce383627674",
        "name": "Upload Cert",
        "order": 7,
        "width": 4,
        "height": 1,
        "format": "\n<body>\n<button class=\"md-raised md-button md-ink-ripple\" onclick=\"importCertData()\">Choose File</button>    \n\n<script>\nlet certScope = scope;\n\nfunction importCertData() {\n  let input = document.createElement('input');\n  input.type = 'file';\n  input.id = 'uploadCert';\n  input.onchange = _ => {\n    let fReader = new FileReader();\n    fReader.readAsArrayBuffer(input.files[0]);\n    fReader.onloadend = function(event) {\n      certScope.send({payload:event.target.result, filename: input.files[0].name});\n    };\n  };\n  input.click();\n};\n</script>\n</body>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 320,
        "wires": [
            [
                "54cbb1e2bf06957a",
                "194bbca5beed6438"
            ]
        ]
    },
    {
        "id": "194bbca5beed6438",
        "type": "ui_text",
        "z": "11df8122a3459712",
        "group": "2871cce383627674",
        "order": 12,
        "width": 6,
        "height": 1,
        "name": "cert filename",
        "label": "",
        "format": "{{msg.filename}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 470,
        "y": 280,
        "wires": []
    },
    {
        "id": "5b295b8c294bc76d",
        "type": "ui_text",
        "z": "11df8122a3459712",
        "group": "3a88c0294b97b966",
        "order": 10,
        "width": 6,
        "height": 1,
        "name": "cfg filename",
        "label": "",
        "format": "{{msg.filename}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 470,
        "y": 500,
        "wires": []
    },
    {
        "id": "10b748e69b2169e6",
        "type": "file",
        "z": "11df8122a3459712",
        "name": "cert_file.pfx",
        "filename": "filepath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 440,
        "wires": [
            [
                "503c09fd27f1752c"
            ]
        ]
    },
    {
        "id": "cf73e19013dcacb6",
        "type": "file",
        "z": "11df8122a3459712",
        "name": "cfg_file.cfg",
        "filename": "pathname",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "503c09fd27f1752c"
            ]
        ]
    },
    {
        "id": "975b39d4159692ed",
        "type": "downloadfile",
        "z": "11df8122a3459712",
        "name": "vcache.cfg",
        "filename": "vcache.cfg",
        "encoding": "none",
        "x": 1070,
        "y": 620,
        "wires": [],
        "inputLabels": [
            "file"
        ]
    },
    {
        "id": "2c4f8cd472a6408d",
        "type": "ui_ui_control",
        "z": "11df8122a3459712",
        "name": "Refresh",
        "events": "all",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "d6107a77f1dd3933"
            ]
        ]
    },
    {
        "id": "bcaa1e503f2c37dc",
        "type": "ui_text_input",
        "z": "11df8122a3459712",
        "name": "",
        "label": "Selection Filter",
        "tooltip": "",
        "group": "07348f93a10a8484",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "cfg_select_flt",
        "sendOnBlur": true,
        "className": "",
        "topicType": "global",
        "x": 480,
        "y": 160,
        "wires": [
            [
                "e7566ddd855a6c39"
            ]
        ]
    },
    {
        "id": "6a787b545c055172",
        "type": "ui_table",
        "z": "11df8122a3459712",
        "group": "07348f93a10a8484",
        "name": "Nodes",
        "order": 2,
        "width": 6,
        "height": 3,
        "columns": [
            {
                "field": "node",
                "title": "Nodes",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1050,
        "y": 80,
        "wires": [
            [
                "22938240a8f2b3b0"
            ]
        ]
    },
    {
        "id": "e7566ddd855a6c39",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "select nodes",
        "func": "var target = msg.payload;\nif (msg.manager || msg.payload === \"\") {\n    var mgr_host = global.get(\"MGR_HOSTNAME\");\n    msg.payload = mgr_host\n} else {\n    global.set(\"cfg_select_flt\", target);\n    target = target.replace(/\\*/g, '\\\\*');\n    msg.command = \"salt \" + target + \" --preview-target --output json\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 160,
        "wires": [
            [
                "1af429e23733ad97"
            ]
        ]
    },
    {
        "id": "013a5c6ca5ac037a",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "set mgr flt",
        "func": "msg.payload = \"\";\nmsg.manager = true;\nglobal.set(\"cfg_select_flt\",\"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 180,
        "wires": [
            [
                "bcaa1e503f2c37dc"
            ]
        ]
    },
    {
        "id": "79ab8b7c05db6547",
        "type": "ui_template",
        "z": "11df8122a3459712",
        "group": "07348f93a10a8484",
        "name": "",
        "order": 13,
        "width": 3,
        "height": 1,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "7f14c039b681c6bb",
        "type": "ui_button",
        "z": "11df8122a3459712",
        "name": "",
        "group": "07348f93a10a8484",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": true,
        "label": "All Nodes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "*",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "c17c21e9b49759d6"
            ]
        ]
    },
    {
        "id": "d6107a77f1dd3933",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "select flt default",
        "func": "\nvar cur = global.get(\"cfg_select_flt\");\nif (typeof cur === 'undefined' || cur === null) {\n    cur = \"*\"\n}\nglobal.set(\"cfg_select_flt\", cur);\nmsg.payload = cur;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 100,
        "wires": [
            [
                "bcaa1e503f2c37dc"
            ]
        ]
    },
    {
        "id": "54983162ebc9d28b",
        "type": "exec",
        "z": "11df8122a3459712",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "salt preview target",
        "x": 710,
        "y": 80,
        "wires": [
            [
                "19ce1ff653d30446"
            ],
            [],
            []
        ]
    },
    {
        "id": "1af429e23733ad97",
        "type": "switch",
        "z": "11df8122a3459712",
        "name": "",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 160,
        "wires": [
            [
                "54983162ebc9d28b"
            ],
            []
        ]
    },
    {
        "id": "19ce1ff653d30446",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "node tbl",
        "func": "const rowSelect = \"function (e, row) { e.preventDefault(); this.send({payload: {node: row.getData().node, rowDblClick: true}});}\";\nvar table = [];\ntry {\n    // Parse the JSON string into a JavaScript object\n    var json = JSON.parse(msg.payload);\n    table = json.map((node) => { return {\"node\": node};})\n} catch (error) {\n    // Handle JSON parsing errors here\n    console.error(\"Error parsing JSON:\", error);\n}\nmsg.payload = table;\nmsg.ui_control = {\n    tabulator: {\n        rowDblClick: rowSelect,\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 80,
        "wires": [
            [
                "6a787b545c055172"
            ]
        ]
    },
    {
        "id": "c17c21e9b49759d6",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "set * flt",
        "func": "global.set(\"cfg_select_flt\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 220,
        "wires": [
            [
                "bcaa1e503f2c37dc"
            ]
        ]
    },
    {
        "id": "f8d9696851e429f0",
        "type": "inject",
        "z": "11df8122a3459712",
        "name": "init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "d6107a77f1dd3933"
            ]
        ]
    },
    {
        "id": "2498d124453c3e29",
        "type": "ui_template",
        "z": "11df8122a3459712",
        "group": "07348f93a10a8484",
        "name": "",
        "order": 8,
        "width": 4,
        "height": 1,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4944f5a3f72fe95a",
        "type": "function",
        "z": "11df8122a3459712",
        "name": "node selected",
        "func": "msg.payload = msg.payload.node;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 140,
        "wires": [
            [
                "c7fb9e7134d44403"
            ]
        ]
    },
    {
        "id": "b542c4f3688f3f35",
        "type": "link in",
        "z": "11df8122a3459712",
        "name": "node select",
        "links": [
            "c7fb9e7134d44403"
        ],
        "x": 215,
        "y": 140,
        "wires": [
            [
                "bcaa1e503f2c37dc"
            ]
        ]
    },
    {
        "id": "c7fb9e7134d44403",
        "type": "link out",
        "z": "11df8122a3459712",
        "name": "node dbl click",
        "mode": "link",
        "links": [
            "b542c4f3688f3f35"
        ],
        "x": 1315,
        "y": 140,
        "wires": []
    },
    {
        "id": "22938240a8f2b3b0",
        "type": "switch",
        "z": "11df8122a3459712",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "rowDblClick",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1190,
        "y": 80,
        "wires": [
            [
                "4944f5a3f72fe95a"
            ]
        ]
    },
    {
        "id": "9ca920d805009264",
        "type": "ui_button",
        "z": "08ebeea6e2046abd",
        "name": "Accept All",
        "group": "2bfbf363d31643c1",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Accept All",
        "tooltip": "Accept all pending cache mgmt registrations",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 300,
        "y": 380,
        "wires": [
            [
                "1e980162154930d3"
            ]
        ]
    },
    {
        "id": "1e980162154930d3",
        "type": "exec",
        "z": "08ebeea6e2046abd",
        "command": "salt-key -y -A",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 530,
        "y": 380,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "32ac04d1f6fe6e9e",
        "type": "ui_table",
        "z": "08ebeea6e2046abd",
        "group": "2bfbf363d31643c1",
        "name": "Pending Minions",
        "order": 2,
        "width": 7,
        "height": 1,
        "columns": [
            {
                "field": "node",
                "title": "Node",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 550,
        "y": 120,
        "wires": [
            [
                "acf4447a9db5dc4c"
            ]
        ]
    },
    {
        "id": "5a890de0ddaf48bb",
        "type": "inject",
        "z": "08ebeea6e2046abd",
        "name": "poll 5s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "2f2e94ea3008ee23"
            ]
        ]
    },
    {
        "id": "f1ecdf3d66c25ebd",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "pending minion data",
        "func": "if (msg.payload.length === 0) return null;\nvar json = JSON.parse(msg.payload);\nvar table = json[\"minions_pre\"].map((node) => (\n    {\n        \"node\": node,\n    }\n));\nconst rowContext = \"function (e, row) { e.preventDefault(); this.send({payload: {row: row.getData(), clientX: e.clientX, clientY: e.clientY}});}\";\nmsg.ui_control = {\n    tabulator: {\n        rowContext: rowContext\n    }\n}\n    \nmsg.payload = table;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 60,
        "wires": [
            [
                "32ac04d1f6fe6e9e"
            ]
        ]
    },
    {
        "id": "acf4447a9db5dc4c",
        "type": "ui_context_menu",
        "z": "08ebeea6e2046abd",
        "group": "2bfbf363d31643c1",
        "order": 11,
        "width": 6,
        "height": 1,
        "fontSize": 16,
        "inputPositionXField": "payload.clientX",
        "inputPositionXType": "msg",
        "inputPositionYField": "payload.clientY",
        "inputPositionYType": "msg",
        "outputField": "payload",
        "inputMenuField": "menu",
        "inputMenuType": "fixed",
        "menuItems": [
            {
                "id": "",
                "icon": "",
                "label": "Accept",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "",
                "icon": "",
                "label": "Reject",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            },
            {
                "id": "",
                "icon": "",
                "label": "Delete",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            }
        ],
        "colors": "theme",
        "textColor": "#000000",
        "backgroundColor": "#ffffff",
        "borderColor": "#626262",
        "intervalLength": 0,
        "intervalUnit": "secs",
        "startTimerAtOpen": false,
        "startTimerAtLeave": true,
        "stopTimerAtEnter": true,
        "name": "pending nodes ctx",
        "x": 790,
        "y": 120,
        "wires": [
            [
                "7965e8cf8c0f94ee"
            ]
        ]
    },
    {
        "id": "7965e8cf8c0f94ee",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "handle context menu",
        "func": "if (msg.payload.toLowerCase() === 'delete') {\n    const node_id = msg.sourceMsg.payload.row.node;\n    msg.payload = \"salt-key -y -d \" + node_id;\n} else if (msg.payload.toLowerCase() === 'accept') {\n    const node_id = msg.sourceMsg.payload.row.node;\n    msg.payload = \"salt-key -y -a \" + node_id;\n} else if (msg.payload.toLowerCase() === 'reject') {\n    const node_id = msg.sourceMsg.payload.row.node;\n    msg.payload = \"salt-key -y -r \" + node_id;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 160,
        "wires": [
            [
                "430201fe36756d7b"
            ]
        ]
    },
    {
        "id": "430201fe36756d7b",
        "type": "exec",
        "z": "08ebeea6e2046abd",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "salt-key cmd",
        "x": 990,
        "y": 320,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "c66030ce72b513a0",
        "type": "ui_table",
        "z": "08ebeea6e2046abd",
        "group": "90cedd2a8446aa03",
        "name": "Rejected Minions",
        "order": 2,
        "width": 7,
        "height": 1,
        "columns": [
            {
                "field": "node",
                "title": "Node",
                "width": "",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 550,
        "y": 180,
        "wires": [
            [
                "82b1693fd1f95a9a"
            ]
        ]
    },
    {
        "id": "75933c13fdf23b68",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "rejected minion data",
        "func": "if (msg.payload.length === 0) return null;\nvar json = JSON.parse(msg.payload);\nvar table = [];\nif (json[\"minions_rejected\"].length) {\n    table.push(...json[\"minions_rejected\"].map((node) => ({\"node\": node})));\n}\nif (json[\"minions_denied\"].length) {\n    table.push(...json[\"minions_denied\"].map((node) => ({ \"node\": node })));\n}\n\nconst rowContext = \"function (e, row) { e.preventDefault(); this.send({payload: {row: row.getData(), clientX: e.clientX, clientY: e.clientY}});}\";\nmsg.ui_control = {\n    tabulator: {\n        rowContext: rowContext\n    }\n}\n    \nmsg.payload = table;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 240,
        "wires": [
            [
                "c66030ce72b513a0"
            ]
        ]
    },
    {
        "id": "7876ca71a72f89cd",
        "type": "ui_button",
        "z": "08ebeea6e2046abd",
        "name": "",
        "group": "90cedd2a8446aa03",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Delete All",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 300,
        "y": 320,
        "wires": [
            [
                "56b4fe9fdbfea327"
            ]
        ]
    },
    {
        "id": "82b1693fd1f95a9a",
        "type": "ui_context_menu",
        "z": "08ebeea6e2046abd",
        "group": "90cedd2a8446aa03",
        "order": 7,
        "width": 6,
        "height": 1,
        "fontSize": 16,
        "inputPositionXField": "payload.clientX",
        "inputPositionXType": "msg",
        "inputPositionYField": "payload.clientY",
        "inputPositionYType": "msg",
        "outputField": "payload",
        "inputMenuField": "menu",
        "inputMenuType": "fixed",
        "menuItems": [
            {
                "id": "",
                "icon": "",
                "label": "Delete",
                "topic": "",
                "payload": "",
                "payloadType": "str",
                "visible": true,
                "enabled": true
            }
        ],
        "colors": "theme",
        "textColor": "#000000",
        "backgroundColor": "#ffffff",
        "borderColor": "#626262",
        "intervalLength": 0,
        "intervalUnit": "secs",
        "startTimerAtOpen": false,
        "startTimerAtLeave": true,
        "stopTimerAtEnter": true,
        "name": "rejected nodes ctx",
        "x": 790,
        "y": 180,
        "wires": [
            [
                "7965e8cf8c0f94ee"
            ]
        ]
    },
    {
        "id": "56b4fe9fdbfea327",
        "type": "exec",
        "z": "08ebeea6e2046abd",
        "command": "vcache-mgr-nodes",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "vcache-mgr-nodes",
        "x": 550,
        "y": 320,
        "wires": [
            [
                "4991dec486cbc8e7"
            ],
            [],
            []
        ]
    },
    {
        "id": "4991dec486cbc8e7",
        "type": "function",
        "z": "08ebeea6e2046abd",
        "name": "delete rejected",
        "func": "if (msg.payload.length === 0) return null;\nvar json = JSON.parse(msg.payload);\nvar table = [];\nif (json[\"minions_rejected\"].length) {\n    table.push(...json[\"minions_rejected\"].map((node) => ({ \"node\": node })));\n}\nif (json[\"minions_denied\"].length) {\n    table.push(...json[\"minions_denied\"].map((node) => ({ \"node\": node })));\n    node.warn(\"adding denioed: \" + json[\"minions_denied\"].length);\n}\ntable.forEach(function (row) {\n    // Create a new message for each row\n    var msg = {\n        payload: \"salt-key -y -d \" + row.node\n    };\n\n    // Send the message to the next node or debug it\n    node.send(msg);\n});\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 320,
        "wires": [
            [
                "430201fe36756d7b"
            ]
        ]
    },
    {
        "id": "c5268070.c55a3",
        "type": "ui_template",
        "z": "08ebeea6e2046abd",
        "group": "acc467dc501a1809",
        "name": "Upload Roster",
        "order": 14,
        "width": 4,
        "height": 1,
        "format": "\n<body>\n<button class=\"md-raised md-button md-ink-ripple\" onclick=\"importRosterData()\">Choose File</button>    \n\n<script>\nvar rosterScope = scope;\n\nfunction importRosterData() {\n  let input = document.createElement('input');\n  input.type = 'file';\n  input.id = 'rosterUpload';\n  input.onchange = _ => {\n    let fReader = new FileReader();\n    fReader.readAsText(input.files[0]);\n    fReader.onloadend = function(event) {\n    rosterScope.send({payload:event.target.result, filename: input.files[0].name});}\n  };\n  input.click();\n}\n</script>\n</body>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 520,
        "wires": [
            [
                "8b7e4ca7d4bb2e6b"
            ]
        ]
    },
    {
        "id": "aa16085ad668c5b5",
        "type": "ui_button",
        "z": "08ebeea6e2046abd",
        "name": "",
        "group": "acc467dc501a1809",
        "order": 9,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Deploy",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 880,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "6359dd77c867ec43",
        "type": "ui_button",
        "z": "08ebeea6e2046abd",
        "name": "",
        "group": "acc467dc501a1809",
        "order": 11,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Uninstall",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1020,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "8b7e4ca7d4bb2e6b",
        "type": "ui_text",
        "z": "08ebeea6e2046abd",
        "group": "acc467dc501a1809",
        "order": 17,
        "width": 6,
        "height": 1,
        "name": "roster filename",
        "label": "",
        "format": "{{msg.filename}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 540,
        "y": 520,
        "wires": []
    },
    {
        "id": "21f95f2c06915d16",
        "type": "ui_text",
        "z": "08ebeea6e2046abd",
        "group": "acc467dc501a1809",
        "order": 5,
        "width": 6,
        "height": 1,
        "name": "install filename",
        "label": "",
        "format": "{{msg.filename}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 540,
        "y": 480,
        "wires": []
    },
    {
        "id": "44569ca2744bc813",
        "type": "ui_button",
        "z": "08ebeea6e2046abd",
        "name": "",
        "group": "acc467dc501a1809",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Test",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 750,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "d3ce6d119758890a",
        "type": "ui_text",
        "z": "08ebeea6e2046abd",
        "group": "acc467dc501a1809",
        "order": 1,
        "width": 3,
        "height": 1,
        "name": "installer",
        "label": "",
        "format": "Installer",
        "layout": "row-right",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 100,
        "y": 480,
        "wires": []
    },
    {
        "id": "1a12cfb521bb462f",
        "type": "ui_text",
        "z": "08ebeea6e2046abd",
        "group": "acc467dc501a1809",
        "order": 13,
        "width": 3,
        "height": 1,
        "name": "roster",
        "label": "",
        "format": "Roster",
        "layout": "row-right",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 90,
        "y": 520,
        "wires": []
    },
    {
        "id": "b47bef94379ec6a7",
        "type": "ui_template",
        "z": "08ebeea6e2046abd",
        "group": "acc467dc501a1809",
        "name": "Upload Installer",
        "order": 2,
        "width": 4,
        "height": 1,
        "format": "\n<body>\n<button class=\"md-raised md-button md-ink-ripple\" onclick=\"importData()\">Choose File</button>    \n\n<script>\nlet restoreScope = scope;\n\nfunction importData() {\n  let input = document.createElement('input');\n  input.type = 'file';\n  input.id = 'restoreBtn';\n  input.onchange = _ => {\n    // you can use this method to get file and perform respective operations\n        let fReader = new FileReader();\n        fReader.readAsArrayBuffer(input.files[0]);\n        fReader.onloadend = function(event){\n        restoreScope.send({payload:event.target.result, filename:input.files[0].name});}\n        };\n  input.click();\n}\n</script>\n</body>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 480,
        "wires": [
            [
                "21f95f2c06915d16"
            ]
        ]
    },
    {
        "id": "a141c74a0f8db380",
        "type": "complete",
        "z": "08ebeea6e2046abd",
        "name": "reload minions",
        "scope": [
            "430201fe36756d7b"
        ],
        "uncaught": false,
        "x": 120,
        "y": 100,
        "wires": [
            [
                "2f2e94ea3008ee23"
            ]
        ]
    },
    {
        "id": "2f2e94ea3008ee23",
        "type": "exec",
        "z": "08ebeea6e2046abd",
        "command": "vcache-mgr-nodes",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "vcache-mgr-nodes",
        "x": 310,
        "y": 160,
        "wires": [
            [
                "f1ecdf3d66c25ebd",
                "75933c13fdf23b68"
            ],
            [],
            []
        ]
    },
    {
        "id": "edf12038240ce538",
        "type": "ui_text_input",
        "z": "fa2fab6babb7f320",
        "name": "cert pw",
        "label": "certificate password",
        "tooltip": "pkcs12 password (blank if none)",
        "group": "f1217b32bda055e4",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "password",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "ce2b8b621ad44eb7"
            ]
        ]
    },
    {
        "id": "75280cfbd523d046",
        "type": "ui_text_input",
        "z": "fa2fab6babb7f320",
        "name": "cert tag",
        "label": "certificate tag",
        "tooltip": "certificate tag name identifying the destination",
        "group": "f1217b32bda055e4",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "4912e7bd5cb811a1"
            ]
        ]
    },
    {
        "id": "ce2b8b621ad44eb7",
        "type": "function",
        "z": "fa2fab6babb7f320",
        "name": "set cert pw cfg",
        "func": "global.set('CERT_PW_CFG', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "4912e7bd5cb811a1",
        "type": "function",
        "z": "fa2fab6babb7f320",
        "name": "set cert tag cfg",
        "func": "global.set('CERT_TAG_CFG', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c090e42cab3b307e",
        "type": "ui_button",
        "z": "fa2fab6babb7f320",
        "name": "publish cert",
        "group": "f1217b32bda055e4",
        "order": 9,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Publish Certificate",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "67491a9b8e890714"
            ]
        ]
    },
    {
        "id": "fa21d47ff0471d7b",
        "type": "function",
        "z": "fa2fab6babb7f320",
        "name": "set cert file cfg",
        "func": "\nglobal.set('CERT_FILE_CFG', msg.filename);\nglobal.set('CERT_FILE_DATA_CFG', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "67491a9b8e890714",
        "type": "function",
        "z": "fa2fab6babb7f320",
        "name": "publish cert",
        "func": "const os = require('os');\nvar mgr_host = os.hostname();\n\nconst cert_file = global.get(\"CERT_FILE_CFG\");\nconst cert_tag = global.get(\"CERT_TAG_CFG\");\nconst cert_pw = global.get(\"CERT_PW_CFG\");\nvar selection = global.get(\"nodeSelected\");\nif (selection == '*') {\n    selection = selection.replace(/\\*/g, '\\\\*');\n}\nif (cert_file && cert_tag) {\n    const cert_file_data = global.get(\"CERT_FILE_DATA_CFG\");\n    node.warn(\"cert len: \" + cert_file_data.length);\n    msg.payload = cert_file_data;\n    msg.filepath = \"/srv/salt/state/pki/\" + cert_file;\n    if (selection == mgr_host) {\n        node.warning(\"set our own cert\");\n    } else {\n        if (cert_pw && cert_pw.length) {\n            msg.command = \"salt \" + selection + \" state.sls vcache.util.push_cert pillar='{\\\"cert_tag\\\": \" + cert_tag + \", \\\"cert_pw\\\": \" + cert_pw + \", \\\"cert_file\\\": \" + cert_file + \"}'\";\n        } else {\n            msg.command = \"salt \" + selection + \" state.sls vcache.util.push_cert pillar='{\\\"cert_tag\\\": \" + cert_tag + \", \\\"cert_file\\\": \" + cert_file + \"}'\";\n        }\n    }\n} else {\n    msg.pathname = \"/dev/null\";\n    msg.command = \"false\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "a60c14566eaf3f35"
            ]
        ]
    },
    {
        "id": "7753121e1c1cef2b",
        "type": "exec",
        "z": "fa2fab6babb7f320",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "salt state run",
        "x": 870,
        "y": 340,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "ea0d9d08c6b0db14",
        "type": "function",
        "z": "fa2fab6babb7f320",
        "name": "set cfg file cfg",
        "func": "\n\nglobal.set('CFG_FILE_CFG', msg.filename);\nglobal.set('CFG_FILE_DATA_CFG', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "e55d101fba2d2acc",
        "type": "ui_button",
        "z": "fa2fab6babb7f320",
        "name": "publish cfg",
        "group": "3c055d5fa85d4ea9",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Publish Config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "ed61a546e6ac37b9"
            ]
        ]
    },
    {
        "id": "ed61a546e6ac37b9",
        "type": "function",
        "z": "fa2fab6babb7f320",
        "name": "publish cfg",
        "func": "const cfg_file = global.get(\"CFG_FILE_CFG\");\n\nif (cfg_file) {\n    const cfg_file_data = global.get(\"CFG_FILE_DATA_CFG\");\n    msg.payload = cfg_file_data;\n    msg.pathname = \"/srv/salt/state/tmp/\" + cfg_file;\n    msg.command = \"salt \\\\* state.sls vcache.util.push_cfg pillar='{\\\"cfg_file\\\": \" + cfg_file + \"}'\";\n} else {\n    msg.command = \"false\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 420,
        "wires": [
            [
                "93a95e7e7a387a43"
            ]
        ]
    },
    {
        "id": "0a75e5d612a53f16",
        "type": "ui_button",
        "z": "fa2fab6babb7f320",
        "name": "download cfg",
        "group": "3c055d5fa85d4ea9",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Download Config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "5ffe6046f776a8af"
            ]
        ]
    },
    {
        "id": "5ffe6046f776a8af",
        "type": "function",
        "z": "fa2fab6babb7f320",
        "name": "download cfg",
        "func": "msg.filename = \"vcache-mgr.cfg\";\nmsg.payload = \"/etc/vcache-mgr/vcache-mgr.cfg\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 460,
        "wires": [
            [
                "8be836b205d695ba"
            ]
        ]
    },
    {
        "id": "8be836b205d695ba",
        "type": "file in",
        "z": "fa2fab6babb7f320",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 600,
        "y": 460,
        "wires": [
            [
                "a9195db12f26e0c3"
            ]
        ]
    },
    {
        "id": "a9195db12f26e0c3",
        "type": "function",
        "z": "fa2fab6babb7f320",
        "name": "function 2",
        "func": "msg.filename  = \"vcache-mgr.cfg\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 460,
        "wires": [
            [
                "f7448adc9e63ca5d"
            ]
        ]
    },
    {
        "id": "c5bd6dcde8356531",
        "type": "ui_template",
        "z": "fa2fab6babb7f320",
        "group": "3c055d5fa85d4ea9",
        "name": "Upload Cfg",
        "order": 5,
        "width": 4,
        "height": 1,
        "format": "\n<body>\n<button class=\"md-raised md-button md-ink-ripple\" onclick=\"importCfgData()\">Choose File</button>    \n\n<script>\nlet cfgScope = scope;\n\nfunction importCfgData() {\n  let input = document.createElement('input');\n  input.type = 'file';\n  input.id = 'cfgUpload';\n  input.onchange = _ => {\n    let fReader = new FileReader();\n    fReader.readAsText(input.files[0]);\n    fReader.onloadend = function(event){\n    cfgScope.send({payload:event.target.result, filename: input.files[0].name});}\n  };\n  input.click();\n}\n</script>\n</body>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "ea0d9d08c6b0db14",
                "ed4d6cd6216494bd"
            ]
        ]
    },
    {
        "id": "d4e9863c3efb6eda",
        "type": "ui_template",
        "z": "fa2fab6babb7f320",
        "group": "f1217b32bda055e4",
        "name": "Upload Cert",
        "order": 7,
        "width": 4,
        "height": 1,
        "format": "\n<body>\n<button class=\"md-raised md-button md-ink-ripple\" onclick=\"importCertData()\">Choose File</button>    \n\n<script>\nlet certScope = scope;\n\nfunction importCertData() {\n  let input = document.createElement('input');\n  input.type = 'file';\n  input.id = 'uploadCert';\n  input.onchange = _ => {\n    let fReader = new FileReader();\n    fReader.readAsArrayBuffer(input.files[0]);\n    fReader.onloadend = function(event) {\n      certScope.send({payload:event.target.result, filename: input.files[0].name});\n    };\n  };\n  input.click();\n};\n</script>\n</body>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "fa21d47ff0471d7b",
                "a710bd7708840b83"
            ]
        ]
    },
    {
        "id": "a710bd7708840b83",
        "type": "ui_text",
        "z": "fa2fab6babb7f320",
        "group": "f1217b32bda055e4",
        "order": 12,
        "width": 6,
        "height": 1,
        "name": "cert filename",
        "label": "",
        "format": "{{msg.filename}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 390,
        "y": 120,
        "wires": []
    },
    {
        "id": "ed4d6cd6216494bd",
        "type": "ui_text",
        "z": "fa2fab6babb7f320",
        "group": "3c055d5fa85d4ea9",
        "order": 10,
        "width": 6,
        "height": 1,
        "name": "cfg filename",
        "label": "",
        "format": "{{msg.filename}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 390,
        "y": 340,
        "wires": []
    },
    {
        "id": "a60c14566eaf3f35",
        "type": "file",
        "z": "fa2fab6babb7f320",
        "name": "cert_file.pfx",
        "filename": "filepath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 610,
        "y": 280,
        "wires": [
            [
                "7753121e1c1cef2b"
            ]
        ]
    },
    {
        "id": "93a95e7e7a387a43",
        "type": "file",
        "z": "fa2fab6babb7f320",
        "name": "cfg_file.cfg",
        "filename": "pathname",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 610,
        "y": 420,
        "wires": [
            [
                "7753121e1c1cef2b"
            ]
        ]
    },
    {
        "id": "f7448adc9e63ca5d",
        "type": "downloadfile",
        "z": "fa2fab6babb7f320",
        "name": "vcache-mgr.cfg",
        "filename": "vcache-mgr.cfg",
        "encoding": "none",
        "x": 1000,
        "y": 460,
        "wires": [],
        "inputLabels": [
            "file"
        ]
    },
    {
        "id": "6bdfab9a6550cc9d",
        "type": "Drives",
        "z": "84f8ac6cd53e32a0",
        "name": "",
        "x": 230,
        "y": 720,
        "wires": [
            [
                "c6261c303b3e80e5",
                "918db9a64c2d29e3",
                "a1144232948ffef6"
            ]
        ]
    },
    {
        "id": "e8cb0c3e58e999ca",
        "type": "Memory",
        "z": "84f8ac6cd53e32a0",
        "name": "Memory",
        "scale": "Byte",
        "x": 240,
        "y": 540,
        "wires": [
            [
                "c392722973e17a04",
                "d014f559d758d559",
                "425ea84420b08482"
            ]
        ]
    },
    {
        "id": "6ab7e1e9f4227464",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": " uptime",
        "func": " var totalNumberOfSeconds = msg.payload.uptime;\n var days = parseInt( totalNumberOfSeconds / 86400 );\n var hours = parseInt (( totalNumberOfSeconds - ( days * 86400 )) / 3600  );\n var minutes = parseInt ((totalNumberOfSeconds - ((hours * 3600)+( days * 86400 ))) / 60 );\n var seconds = parseInt(totalNumberOfSeconds - ((hours * 3600) + (minutes * 60)+( days * 86400 )));\n var result = (days < 10 ? \"0\" + days : days) + \":\" + (hours < 10 ? \"0\" + hours : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds  < 10 ? \"0\" + seconds : seconds);\n msg.payload = result;\n msg.topic = \"uptime\";\n return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 120,
        "wires": [
            [
                "eabc6c0589a35e5b"
            ]
        ]
    },
    {
        "id": "eabc6c0589a35e5b",
        "type": "ui_text",
        "z": "84f8ac6cd53e32a0",
        "group": "a60c456977c4f620",
        "order": 8,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "UpTime: ",
        "format": "<font size=3>{{msg.payload}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 880,
        "y": 120,
        "wires": []
    },
    {
        "id": "ead07793eb15dece",
        "type": "cpu",
        "z": "84f8ac6cd53e32a0",
        "name": "",
        "msgCore": false,
        "msgOverall": true,
        "msgArray": false,
        "msgTemp": false,
        "x": 250,
        "y": 380,
        "wires": [
            [
                "056724b158ac72cb",
                "d55219de949686a9"
            ]
        ]
    },
    {
        "id": "9b79c1ad7cdb9add",
        "type": "ui_chart",
        "z": "84f8ac6cd53e32a0",
        "name": "CPU Historic",
        "group": "a60c456977c4f620",
        "order": 16,
        "width": 5,
        "height": 3,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 890,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "425ea84420b08482",
        "type": "ui_gauge",
        "z": "84f8ac6cd53e32a0",
        "name": "",
        "group": "a60c456977c4f620",
        "order": 3,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "RAM",
        "label": "",
        "format": "{{msg.payload.memusage | number:1}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "90",
        "diff": false,
        "className": "def",
        "x": 870,
        "y": 540,
        "wires": []
    },
    {
        "id": "66ed6f7fa80a65e4",
        "type": "ui_text",
        "z": "84f8ac6cd53e32a0",
        "group": "a60c456977c4f620",
        "order": 1,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "vCache Manager Version: ",
        "format": "<font size=3>{{msg.payload}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 930,
        "y": 80,
        "wires": []
    },
    {
        "id": "3e948c5674376fdf",
        "type": "ui_text",
        "z": "84f8ac6cd53e32a0",
        "group": "a60c456977c4f620",
        "order": 20,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Memory:  ",
        "format": "<font size=3>{{msg.value}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 880,
        "y": 500,
        "wires": []
    },
    {
        "id": "c392722973e17a04",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "mem total",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\nmsg.value = formatBytes(msg.payload.totalmem);\nmsg.payload = msg.payload.totalmem/(1024*1024*1024);\nmsg.topic = \"mem_total\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 500,
        "wires": [
            [
                "3e948c5674376fdf"
            ]
        ]
    },
    {
        "id": "c6261c303b3e80e5",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "disk use %",
        "func": "msg.payload = msg.payload[0].capacity * 100.0;\nmsg.payload = msg.payload.toFixed(2);\nmsg.topic = \"disk_use_pct\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 700,
        "wires": [
            [
                "158fc618c1825f92"
            ]
        ]
    },
    {
        "id": "158fc618c1825f92",
        "type": "ui_gauge",
        "z": "84f8ac6cd53e32a0",
        "name": "",
        "group": "a60c456977c4f620",
        "order": 4,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "HD",
        "label": "",
        "format": "{{value | number:1}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "90",
        "diff": false,
        "className": "def",
        "x": 870,
        "y": 700,
        "wires": []
    },
    {
        "id": "d014f559d758d559",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "mem used",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.value = formatBytes(msg.payload.totalmem - msg.payload.freemem);\nmsg.payload = (msg.payload.totalmem - msg.payload.freemem)/(1024*1024*1024);\nmsg.topic = \"mem_use\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 620,
        "wires": [
            [
                "36d3416bac33cefe",
                "d6de0e90e9a74a19"
            ]
        ]
    },
    {
        "id": "36d3416bac33cefe",
        "type": "ui_text",
        "z": "84f8ac6cd53e32a0",
        "group": "a60c456977c4f620",
        "order": 13,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Used: ",
        "format": "{{msg.value}}",
        "layout": "row-center",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 870,
        "y": 620,
        "wires": []
    },
    {
        "id": "7fa6bfdcbf3bde4d",
        "type": "ui_text",
        "z": "84f8ac6cd53e32a0",
        "group": "a60c456977c4f620",
        "order": 11,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Load: ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 870,
        "y": 440,
        "wires": []
    },
    {
        "id": "4d664f72d4e142d2",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "load avgs",
        "func": "msg.payload = msg.payload.loadavg.join(', ');\nmsg.topic = \"cpu_load_avg\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 440,
        "wires": [
            [
                "7fa6bfdcbf3bde4d"
            ]
        ]
    },
    {
        "id": "6073c7e107c31dfc",
        "type": "Loadavg",
        "z": "84f8ac6cd53e32a0",
        "name": "",
        "x": 240,
        "y": 440,
        "wires": [
            [
                "4d664f72d4e142d2"
            ]
        ]
    },
    {
        "id": "3fdec46b5a0d395d",
        "type": "ui_gauge",
        "z": "84f8ac6cd53e32a0",
        "name": "CPU use",
        "group": "a60c456977c4f620",
        "order": 2,
        "width": 5,
        "height": 3,
        "gtype": "gage",
        "title": "CPU",
        "label": "",
        "format": "{{value | number:1}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "80",
        "seg2": "90",
        "diff": false,
        "className": "def",
        "x": 880,
        "y": 360,
        "wires": []
    },
    {
        "id": "f37e026c3700c25d",
        "type": "CPUs",
        "z": "84f8ac6cd53e32a0",
        "name": "",
        "x": 230,
        "y": 300,
        "wires": [
            [
                "d98f5873c939f44e",
                "9f248d8562d51d1e"
            ]
        ]
    },
    {
        "id": "d98f5873c939f44e",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "cpu model",
        "func": "msg.payload = msg.payload.cpus[0].model.replace(/^Intel[^ ]*\\s+[^ ]* /i,\"\");\nmsg.topic = \"cpu_model\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "05662d375965b2f6"
            ]
        ]
    },
    {
        "id": "9f248d8562d51d1e",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "cpu cores",
        "func": "msg.payload = msg.payload.cpus.length;\nmsg.topic = \"cpu_cores\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 320,
        "wires": [
            [
                "2536e60a7b6b218d"
            ]
        ]
    },
    {
        "id": "05662d375965b2f6",
        "type": "ui_text",
        "z": "84f8ac6cd53e32a0",
        "group": "a60c456977c4f620",
        "order": 10,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "CPU: ",
        "format": "<font size=3>{{msg.payload}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 870,
        "y": 280,
        "wires": []
    },
    {
        "id": "2536e60a7b6b218d",
        "type": "ui_text",
        "z": "84f8ac6cd53e32a0",
        "group": "a60c456977c4f620",
        "order": 15,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Cores: ",
        "format": "<font size=3>{{msg.payload}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 870,
        "y": 320,
        "wires": []
    },
    {
        "id": "77101608c8a741d0",
        "type": "ui_text",
        "z": "84f8ac6cd53e32a0",
        "group": "a60c456977c4f620",
        "order": 22,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Disk: ",
        "format": "<font size=3>{{msg.value}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 870,
        "y": 660,
        "wires": []
    },
    {
        "id": "a24bda0decd7715b",
        "type": "ui_text",
        "z": "84f8ac6cd53e32a0",
        "group": "a60c456977c4f620",
        "order": 12,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Used: ",
        "format": "{{msg.value}}",
        "layout": "row-center",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 870,
        "y": 780,
        "wires": []
    },
    {
        "id": "918db9a64c2d29e3",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "disk used",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nmsg.value = formatBytes(msg.payload[0].used);\nmsg.payload = msg.payload[0].used/(1024*1024);\nmsg.topic = \"disk_use\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 780,
        "wires": [
            [
                "a24bda0decd7715b",
                "411b1173ce5f2e46"
            ]
        ]
    },
    {
        "id": "a1144232948ffef6",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "disk size",
        "func": "function formatBytes(bytes, decimals) {\n    if (bytes === 0) return '0 Byte';\n    var k = 1024; // or 1024 for binary\n    var dm = decimals + 1 || 2;\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\nmsg.value = formatBytes(msg.payload[0].size)\nmsg.payload = msg.payload[0].size\nmsg.topic = \"disk_total\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 660,
        "wires": [
            [
                "77101608c8a741d0"
            ]
        ]
    },
    {
        "id": "fd0a6cc27781ff92",
        "type": "ui_text",
        "z": "84f8ac6cd53e32a0",
        "group": "a60c456977c4f620",
        "order": 6,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Host: ",
        "format": "<font size=3>{{msg.payload.hostname}}</font>",
        "layout": "row-left",
        "className": "def",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 870,
        "y": 200,
        "wires": []
    },
    {
        "id": "f577981565971b18",
        "type": "OS",
        "z": "84f8ac6cd53e32a0",
        "name": "",
        "x": 230,
        "y": 200,
        "wires": [
            [
                "fd0a6cc27781ff92",
                "4609c2c8fe72143b"
            ]
        ]
    },
    {
        "id": "056724b158ac72cb",
        "type": "smooth",
        "z": "84f8ac6cd53e32a0",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "8",
        "round": "",
        "mult": "single",
        "reduce": false,
        "x": 520,
        "y": 400,
        "wires": [
            [
                "9b79c1ad7cdb9add"
            ]
        ]
    },
    {
        "id": "97f92eee552ea64b",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "vcache mgr version",
        "func": "msg.payload = global.get(\"version\") || env.get(\"VCACHE_MGR_VERSION\") || '0.0.0';\nmsg.topic =\"version\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 80,
        "wires": [
            [
                "66ed6f7fa80a65e4"
            ]
        ]
    },
    {
        "id": "d55219de949686a9",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "cpu use %",
        "func": "msg.payload = parseFloat(msg.payload).toFixed(2);\nmsg.topic = \"cpu_use_pct\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 360,
        "wires": [
            [
                "3fdec46b5a0d395d"
            ]
        ]
    },
    {
        "id": "4609c2c8fe72143b",
        "type": "function",
        "z": "84f8ac6cd53e32a0",
        "name": "cpu arch",
        "func": "msg.payload = msg.payload.arch;\nmsg.topic = \"cpu_arch\";\nreturn msg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "a68058dd96e20e58",
        "type": "inject",
        "z": "84f8ac6cd53e32a0",
        "name": "loop 5s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "f577981565971b18",
                "f37e026c3700c25d",
                "ead07793eb15dece",
                "6073c7e107c31dfc",
                "e8cb0c3e58e999ca",
                "6bdfab9a6550cc9d",
                "044158cc196c6b64",
                "97f92eee552ea64b"
            ]
        ]
    },
    {
        "id": "044158cc196c6b64",
        "type": "Uptime",
        "z": "84f8ac6cd53e32a0",
        "name": "",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "6ab7e1e9f4227464"
            ]
        ]
    },
    {
        "id": "411b1173ce5f2e46",
        "type": "ui_chart",
        "z": "84f8ac6cd53e32a0",
        "name": "Disk Historic",
        "group": "a60c456977c4f620",
        "order": 18,
        "width": 5,
        "height": 3,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 890,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d6de0e90e9a74a19",
        "type": "ui_chart",
        "z": "84f8ac6cd53e32a0",
        "name": "RAM Historic",
        "group": "a60c456977c4f620",
        "order": 17,
        "width": 5,
        "height": 3,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "3",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 890,
        "y": 580,
        "wires": [
            []
        ]
    }
]